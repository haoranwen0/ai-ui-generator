[debug] [2024-10-06T02:14:07.970Z] ----------------------------------------------------------------------
[debug] [2024-10-06T02:14:07.972Z] Command:       C:\Program Files\nodejs\node.exe C:\Users\hranw\AppData\Roaming\npm\node_modules\firebase-tools\lib\bin\firebase.js emulators:start --import ./firebase-export-1728176904107xjPzK1 --export-on-exit ./exported-dev-data
[debug] [2024-10-06T02:14:07.972Z] CLI Version:   13.19.0
[debug] [2024-10-06T02:14:07.972Z] Platform:      win32
[debug] [2024-10-06T02:14:07.972Z] Node Version:  v20.9.0
[debug] [2024-10-06T02:14:07.972Z] Time:          Sat Oct 05 2024 22:14:07 GMT-0400 (Eastern Daylight Time)
[debug] [2024-10-06T02:14:07.973Z] ----------------------------------------------------------------------
[debug] 
[debug] [2024-10-06T02:14:08.055Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2024-10-06T02:14:08.055Z] > authorizing via signed-in user (hran.wen@gmail.com)
[debug] [2024-10-06T02:14:08.157Z] java version "22.0.1" 2024-04-16

[debug] [2024-10-06T02:14:08.158Z] Java(TM) SE Runtime Environment (build 22.0.1+8-16)
Java HotSpot(TM) 64-Bit Server VM (build 22.0.1+8-16, mixed mode, sharing)

[debug] [2024-10-06T02:14:08.176Z] Parsed Java major version: 22
[info] i  emulators: Starting emulators: auth, functions, firestore, hosting {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: auth, functions, firestore, hosting"}}
[debug] [2024-10-06T02:14:08.188Z] [logging] Logging Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2024-10-06T02:14:08.189Z] [auth] Authentication Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2024-10-06T02:14:08.189Z] [firestore] Firestore Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2024-10-06T02:14:08.189Z] [firestore.websocket] websocket server for firestore only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2024-10-06T02:14:08.189Z] [hosting] Hosting Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2024-10-06T02:14:08.189Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400},{"address":"::1","family":"IPv6","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000},{"address":"::1","family":"IPv6","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"auth":[{"address":"127.0.0.1","family":"IPv4","port":9099}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}],"hosting":[{"address":"127.0.0.1","family":"IPv4","port":5000}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2024-10-06T02:14:08.192Z] [hub] writing locator at C:\Users\hranw\AppData\Local\Temp\hub-ai-ui-generator.json
[debug] [2024-10-06T02:14:08.202Z] [functions] Functions Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2024-10-06T02:14:08.202Z] [eventarc] Eventarc Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2024-10-06T02:14:08.202Z] [tasks] Cloud Tasks Emulator only supports listening on one address (127.0.0.1). Not listening on ::1
[debug] [2024-10-06T02:14:08.203Z] late-assigned ports for functions and eventarc emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400},{"address":"::1","family":"IPv6","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000},{"address":"::1","family":"IPv6","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"auth":[{"address":"127.0.0.1","family":"IPv4","port":9099}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}],"hosting":[{"address":"127.0.0.1","family":"IPv4","port":5000}],"functions":[{"address":"127.0.0.1","family":"IPv4","port":5001}],"eventarc":[{"address":"127.0.0.1","family":"IPv4","port":9299}],"tasks":[{"address":"127.0.0.1","family":"IPv4","port":9499}]},"metadata":{"message":"late-assigned ports for functions and eventarc emulators"}}
[warn] !  functions: The following emulators are not running, calls to these services from the Functions emulator will affect production: database, pubsub, storage, dataconnect {"metadata":{"emulator":{"name":"functions"},"message":"The following emulators are not running, calls to these services from the Functions emulator will affect production: \u001b[1mdatabase, pubsub, storage, dataconnect\u001b[22m"}}
[debug] [2024-10-06T02:14:08.206Z] defaultcredentials: writing to file C:\Users\hranw\AppData\Roaming\firebase\hran_wen_gmail.com_application_default_credentials.json
[debug] [2024-10-06T02:14:08.207Z] Setting GAC to C:\Users\hranw\AppData\Roaming\firebase\hran_wen_gmail.com_application_default_credentials.json {"metadata":{"emulator":{"name":"functions"},"message":"Setting GAC to C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json"}}
[debug] [2024-10-06T02:14:08.208Z] > refreshing access token with scopes: []
[debug] [2024-10-06T02:14:08.209Z] >>> [apiv2][query] POST https://www.googleapis.com/oauth2/v3/token [none]
[debug] [2024-10-06T02:14:08.209Z] >>> [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2024-10-06T02:14:08.369Z] <<< [apiv2][status] POST https://www.googleapis.com/oauth2/v3/token 200
[debug] [2024-10-06T02:14:08.369Z] <<< [apiv2][body] POST https://www.googleapis.com/oauth2/v3/token [omitted]
[debug] [2024-10-06T02:14:08.374Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/ai-ui-generator/adminSdkConfig [none]
[debug] [2024-10-06T02:14:08.688Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/ai-ui-generator/adminSdkConfig 200
[debug] [2024-10-06T02:14:08.688Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/ai-ui-generator/adminSdkConfig {"projectId":"ai-ui-generator","storageBucket":"ai-ui-generator.appspot.com"}
[info] i  firestore: Importing data from C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\firebase-export-1728176904107xjPzK1\firestore_export\firestore_export.overall_export_metadata {"metadata":{"emulator":{"name":"firestore"},"message":"Importing data from C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\firebase-export-1728176904107xjPzK1\\firestore_export\\firestore_export.overall_export_metadata"}}
[debug] [2024-10-06T02:14:08.704Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2024-10-06T02:14:08.705Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2024-10-06T02:14:08.705Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","C:\\Users\\hranw\\.cache\\firebase\\emulators\\cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","ai-ui-generator","--seed_from_export","C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\firebase-export-1728176904107xjPzK1\\firestore_export\\firestore_export.overall_export_metadata","--rules","C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\firestore.rules","--single_project_mode",true,"--functions_emulator","127.0.0.1:5001"],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"C:\\\\Users\\\\hranw\\\\.cache\\\\firebase\\\\emulators\\\\cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"ai-ui-generator\",\"--seed_from_export\",\"C:\\\\Users\\\\hranw\\\\Documents\\\\GitHub\\\\ai-ui-generator\\\\functions\\\\firebase-export-1728176904107xjPzK1\\\\firestore_export\\\\firestore_export.overall_export_metadata\",\"--rules\",\"C:\\\\Users\\\\hranw\\\\Documents\\\\GitHub\\\\ai-ui-generator\\\\firestore.rules\",\"--single_project_mode\",true,\"--functions_emulator\",\"127.0.0.1:5001\"],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to \u001b[1mfirestore-debug.log\u001b[22m"}}
[info] +  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[info] i  auth: Importing config from C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\firebase-export-1728176904107xjPzK1\auth_export\config.json {"metadata":{"emulator":{"name":"auth"},"message":"Importing config from C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\firebase-export-1728176904107xjPzK1\\auth_export\\config.json"}}
[info] i  auth: Importing accounts from C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\firebase-export-1728176904107xjPzK1\auth_export\accounts.json {"metadata":{"emulator":{"name":"auth"},"message":"Importing accounts from C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\firebase-export-1728176904107xjPzK1\\auth_export\\accounts.json"}}
[debug] [2024-10-06T02:14:17.938Z] >>> [apiv2][query] GET https://firebasehosting.googleapis.com/v1beta1/projects/ai-ui-generator/sites 
[debug] [2024-10-06T02:14:18.358Z] <<< [apiv2][status] GET https://firebasehosting.googleapis.com/v1beta1/projects/ai-ui-generator/sites 200
[debug] [2024-10-06T02:14:18.358Z] <<< [apiv2][body] GET https://firebasehosting.googleapis.com/v1beta1/projects/ai-ui-generator/sites {"sites":[{"name":"projects/ai-ui-generator/sites/ai-ui-generator","defaultUrl":"https://ai-ui-generator.web.app","appId":"1:834430302725:web:28506ee44aa9d3c4ebfa6c","type":"DEFAULT_SITE"}]}
[debug] [2024-10-06T02:14:18.359Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/ai-ui-generator/webApps/1:834430302725:web:28506ee44aa9d3c4ebfa6c/config [none]
[debug] [2024-10-06T02:14:18.881Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/ai-ui-generator/webApps/1:834430302725:web:28506ee44aa9d3c4ebfa6c/config 200
[debug] [2024-10-06T02:14:18.882Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/ai-ui-generator/webApps/1:834430302725:web:28506ee44aa9d3c4ebfa6c/config {"projectId":"ai-ui-generator","appId":"1:834430302725:web:28506ee44aa9d3c4ebfa6c","storageBucket":"ai-ui-generator.appspot.com","apiKey":"AIzaSyATGwC0IlPagtYw-7OVicGdUF_dhnmuoxc","authDomain":"ai-ui-generator.firebaseapp.com","messagingSenderId":"834430302725","measurementId":"G-YXXCTGMZER"}
[debug] [2024-10-06T02:14:18.887Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/ai-ui-generator [none]
[debug] [2024-10-06T02:14:19.033Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/ai-ui-generator 200
[debug] [2024-10-06T02:14:19.034Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/ai-ui-generator {"projectId":"ai-ui-generator","projectNumber":"834430302725","displayName":"ai-ui-generator","name":"projects/ai-ui-generator","resources":{"hostingSite":"ai-ui-generator"},"state":"ACTIVE","etag":"1_3ee9e490-5ac2-4b3f-bdcc-54996ba10353"}
[info] i  hosting[ai-ui-generator]: Serving hosting files from: public {"metadata":{"emulator":{"name":"hosting"},"message":"Serving hosting files from: \u001b[1mpublic\u001b[22m"}}
[info] +  hosting[ai-ui-generator]: Local server: http://127.0.0.1:5000 {"metadata":{"emulator":{"name":"hosting"},"message":"Local server: \u001b[4m\u001b[1mhttp://127.0.0.1:5000\u001b[22m\u001b[24m"}}
[debug] [2024-10-06T02:14:19.052Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"ui"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2024-10-06T02:14:19.053Z] Ignoring unsupported arg: port {"metadata":{"emulator":{"name":"ui"},"message":"Ignoring unsupported arg: port"}}
[debug] [2024-10-06T02:14:19.053Z] Starting Emulator UI with command {"binary":"node","args":["C:\\Users\\hranw\\.cache\\firebase\\emulators\\ui-v1.13.0\\server\\server.mjs"],"optionalArgs":[],"joinArgs":false,"shell":false} {"metadata":{"emulator":{"name":"ui"},"message":"Starting Emulator UI with command {\"binary\":\"node\",\"args\":[\"C:\\\\Users\\\\hranw\\\\.cache\\\\firebase\\\\emulators\\\\ui-v1.13.0\\\\server\\\\server.mjs\"],\"optionalArgs\":[],\"joinArgs\":false,\"shell\":false}"}}
[info] i  ui: Emulator UI logging to ui-debug.log {"metadata":{"emulator":{"name":"ui"},"message":"Emulator UI logging to \u001b[1mui-debug.log\u001b[22m"}}
[debug] [2024-10-06T02:14:19.201Z] Web / API server started at 127.0.0.1:4000
 {"metadata":{"emulator":{"name":"ui"},"message":"Web / API server started at 127.0.0.1:4000\n"}}
[debug] [2024-10-06T02:14:19.202Z] Web / API server started at ::1:4000
 {"metadata":{"emulator":{"name":"ui"},"message":"Web / API server started at ::1:4000\n"}}
[info] i  functions: Watching "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions" for Cloud Functions... {"metadata":{"emulator":{"name":"functions"},"message":"Watching \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\" for Cloud Functions..."}}
[debug] [2024-10-06T02:14:19.284Z] Customer code is not Node
[debug] [2024-10-06T02:14:19.285Z] Validating python source
[debug] [2024-10-06T02:14:19.285Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:14:19.288Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:14:19.296Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:14:19.445Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:14:19.455Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:14:19.456Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081

[error] Press CTRL+C to quit

[debug] [2024-10-06T02:14:20.605Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\__pycache__\main.cpython-311.pyc changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\__pycache__\\main.cpython-311.pyc changed, reloading triggers"}}
[debug] [2024-10-06T02:14:21.606Z] Customer code is not Node
[debug] [2024-10-06T02:14:21.607Z] Validating python source
[debug] [2024-10-06T02:14:21.607Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:14:21.608Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:14:21.618Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:14:21.739Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:14:21.748Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8082"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:14:21.748Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[error] 127.0.0.1 - - [06/Oct/2024 02:14:21] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:14:21.781Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:14:21] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[info] +  functions[us-central1-main]: http function initialized (http://127.0.0.1:5001/ai-ui-generator/us-central1/main). {"metadata":{"emulator":{"name":"functions"},"message":"\u001b[1mhttp\u001b[22m function initialized (http://127.0.0.1:5001/ai-ui-generator/us-central1/main)."}}
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌────────────────┬────────────────┬─────────────────────────────────┐
│ Emulator       │ Host:Port      │ View in Emulator UI             │
├────────────────┼────────────────┼─────────────────────────────────┤
│ Authentication │ 127.0.0.1:9099 │ http://127.0.0.1:4000/auth      │
├────────────────┼────────────────┼─────────────────────────────────┤
│ Functions      │ 127.0.0.1:5001 │ http://127.0.0.1:4000/functions │
├────────────────┼────────────────┼─────────────────────────────────┤
│ Firestore      │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
├────────────────┼────────────────┼─────────────────────────────────┤
│ Hosting        │ 127.0.0.1:5000 │ n/a                             │
└────────────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub running at 127.0.0.1:4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8082
Press CTRL+C to quit

[error] 127.0.0.1 - - [06/Oct/2024 02:14:23] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:14:23.866Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:14:23] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:19:11.808Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:19:11.807Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T02:19:11.808Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:19:11.807Z"],"workRunningCount":1}
[debug] [2024-10-06T02:19:11.809Z] Accepted request OPTIONS /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T02:19:11.812Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T02:19:11.813Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:19:11.822Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","functions-framework"]
[debug] [2024-10-06T02:19:11.830Z] [worker-pool] addWorker(us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] addWorker(us-central1-main)"}}
[debug] [2024-10-06T02:19:11.832Z] [worker-pool] Adding worker with key us-central1-main, total=1 {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Adding worker with key us-central1-main, total=1"}}
[info] >   * Serving Flask app 'main' {"user":" * Serving Flask app 'main'\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Serving Flask app 'main'\r"}}
[info] >   * Debug mode: off {"user":" * Debug mode: off\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Debug mode: off\r"}}
[info] >  WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. {"user":"WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\r"}}
[info] >   * Running on http://127.0.0.1:8596 {"user":" * Running on http://127.0.0.1:8596\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Running on http://127.0.0.1:8596\r"}}
[info] >  Press CTRL+C to quit {"user":"Press CTRL+C to quit\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m Press CTRL+C to quit\r"}}
[info] >  127.0.0.1 - - [06/Oct/2024 02:19:13] "GET /__/health HTTP/1.1" 404 - {"user":"127.0.0.1 - - [06/Oct/2024 02:19:13] \"GET /__/health HTTP/1.1\" 404 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 02:19:13] \"GET /__/health HTTP/1.1\" 404 -\r"}}
[debug] [2024-10-06T02:19:13.926Z] [worker-us-central1-main-cf1638f5-6a59-451c-89c8-84689a300b9e]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-cf1638f5-6a59-451c-89c8-84689a300b9e]: IDLE"}}
[debug] [2024-10-06T02:19:13.926Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T02:19:13.927Z] [worker-us-central1-main-cf1638f5-6a59-451c-89c8-84689a300b9e]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-cf1638f5-6a59-451c-89c8-84689a300b9e]: BUSY"}}
[info] >  127.0.0.1 - - [06/Oct/2024 02:19:13] "OPTIONS /chat HTTP/1.1" 405 - {"user":"127.0.0.1 - - [06/Oct/2024 02:19:13] \"OPTIONS /chat HTTP/1.1\" 405 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 02:19:13] \"OPTIONS /chat HTTP/1.1\" 405 -\r"}}
[debug] [2024-10-06T02:19:13.930Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 3.373ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 3.373ms"}}
[debug] [2024-10-06T02:19:13.930Z] [worker-us-central1-main-cf1638f5-6a59-451c-89c8-84689a300b9e]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-cf1638f5-6a59-451c-89c8-84689a300b9e]: IDLE"}}
[debug] [2024-10-06T02:19:13.930Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T02:19:13.931Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T02:19:13.931Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T02:19:52.484Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:19:52.661Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:19:52.805Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:19:52.944Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:19:53.954Z] Customer code is not Node
[debug] [2024-10-06T02:19:53.955Z] Validating python source
[debug] [2024-10-06T02:19:53.955Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:19:53.957Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:19:53.970Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:19:54.077Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:19:54.085Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:19:54.085Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081
Press CTRL+C to quit

[debug] [2024-10-06T02:19:54.890Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\__pycache__\main.cpython-311.pyc changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\__pycache__\\main.cpython-311.pyc changed, reloading triggers"}}
[error] 127.0.0.1 - - [06/Oct/2024 02:19:55] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:19:55.764Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:19:55] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:19:55.790Z] [worker-pool] Shutting down IDLE worker (us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Shutting down IDLE worker (us-central1-main)"}}
[debug] [2024-10-06T02:19:55.791Z] [worker-us-central1-main-cf1638f5-6a59-451c-89c8-84689a300b9e]: FINISHING {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-cf1638f5-6a59-451c-89c8-84689a300b9e]: FINISHING"}}
[debug] [2024-10-06T02:19:55.794Z] [worker-us-central1-main-cf1638f5-6a59-451c-89c8-84689a300b9e]: exited {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-cf1638f5-6a59-451c-89c8-84689a300b9e]: exited"}}
[debug] [2024-10-06T02:19:55.794Z] [worker-us-central1-main-cf1638f5-6a59-451c-89c8-84689a300b9e]: FINISHED {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-cf1638f5-6a59-451c-89c8-84689a300b9e]: FINISHED"}}
[debug] [2024-10-06T02:19:55.892Z] Customer code is not Node
[debug] [2024-10-06T02:19:55.893Z] Validating python source
[debug] [2024-10-06T02:19:55.893Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:19:55.895Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:19:55.900Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:19:56.009Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:19:56.018Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:19:56.018Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081

[error] Press CTRL+C to quit

[debug] [2024-10-06T02:19:57.451Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:19:57.610Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:19:57.768Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[error] 127.0.0.1 - - [06/Oct/2024 02:19:58] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:19:58.120Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:19:58] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:19:58.784Z] Customer code is not Node
[debug] [2024-10-06T02:19:58.784Z] Validating python source
[debug] [2024-10-06T02:19:58.785Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:19:58.786Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:19:58.797Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:19:58.921Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:19:58.930Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:19:58.930Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081
Press CTRL+C to quit

[debug] [2024-10-06T02:20:00.214Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\__pycache__\main.cpython-311.pyc changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\__pycache__\\main.cpython-311.pyc changed, reloading triggers"}}
[debug] [2024-10-06T02:20:01.218Z] Customer code is not Node
[debug] [2024-10-06T02:20:01.231Z] Validating python source
[debug] [2024-10-06T02:20:01.231Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:20:01.233Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:20:01.259Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[error] 127.0.0.1 - - [06/Oct/2024 02:20:01] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:20:01.423Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[debug] [2024-10-06T02:20:01.427Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[error] 127.0.0.1 - - [06/Oct/2024 02:20:01] "GET /__/quitquitquit HTTP/1.1" 200 -

[debug] [2024-10-06T02:20:01.437Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8082"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:20:01.438Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8082
Press CTRL+C to quit

[error] 127.0.0.1 - - [06/Oct/2024 02:20:03] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:20:03.705Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:20:03] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:20:10.492Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:20:10.492Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T02:20:10.492Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:20:10.492Z"],"workRunningCount":1}
[debug] [2024-10-06T02:20:10.492Z] Accepted request OPTIONS /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T02:20:10.495Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T02:20:10.495Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T02:20:10.495Z] [worker-pool] Cleaned up workers for us-central1-main: 1 --> 0 {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Cleaned up workers for us-central1-main: 1 --> 0"}}
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:20:10.503Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","functions-framework"]
[debug] [2024-10-06T02:20:10.507Z] [worker-pool] addWorker(us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] addWorker(us-central1-main)"}}
[debug] [2024-10-06T02:20:10.507Z] [worker-pool] Adding worker with key us-central1-main, total=1 {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Adding worker with key us-central1-main, total=1"}}
[info] >   * Serving Flask app 'main' {"user":" * Serving Flask app 'main'\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Serving Flask app 'main'\r"}}
[info] >   * Debug mode: off {"user":" * Debug mode: off\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Debug mode: off\r"}}
[info] >  WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. {"user":"WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\r"}}
[info] >   * Running on http://127.0.0.1:8740 {"user":" * Running on http://127.0.0.1:8740\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Running on http://127.0.0.1:8740\r"}}
[info] >  Press CTRL+C to quit {"user":"Press CTRL+C to quit\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m Press CTRL+C to quit\r"}}
[info] >  127.0.0.1 - - [06/Oct/2024 02:20:12] "GET /__/health HTTP/1.1" 404 - {"user":"127.0.0.1 - - [06/Oct/2024 02:20:12] \"GET /__/health HTTP/1.1\" 404 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 02:20:12] \"GET /__/health HTTP/1.1\" 404 -\r"}}
[debug] [2024-10-06T02:20:12.150Z] [worker-us-central1-main-9c208cb0-8021-46f9-bb83-6bc34c6f2efa]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-9c208cb0-8021-46f9-bb83-6bc34c6f2efa]: IDLE"}}
[debug] [2024-10-06T02:20:12.150Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T02:20:12.151Z] [worker-us-central1-main-9c208cb0-8021-46f9-bb83-6bc34c6f2efa]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-9c208cb0-8021-46f9-bb83-6bc34c6f2efa]: BUSY"}}
[info] >  127.0.0.1 - - [06/Oct/2024 02:20:12] "OPTIONS /chat HTTP/1.1" 405 - {"user":"127.0.0.1 - - [06/Oct/2024 02:20:12] \"OPTIONS /chat HTTP/1.1\" 405 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 02:20:12] \"OPTIONS /chat HTTP/1.1\" 405 -\r"}}
[debug] [2024-10-06T02:20:12.154Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 2.9221ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 2.9221ms"}}
[debug] [2024-10-06T02:20:12.154Z] [worker-us-central1-main-9c208cb0-8021-46f9-bb83-6bc34c6f2efa]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-9c208cb0-8021-46f9-bb83-6bc34c6f2efa]: IDLE"}}
[debug] [2024-10-06T02:20:12.154Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T02:20:12.154Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T02:20:12.154Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T02:20:53.342Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:20:53.521Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:20:53.690Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:20:53.826Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:20:53.970Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:20:54.125Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:20:55.127Z] Customer code is not Node
[debug] [2024-10-06T02:20:55.127Z] Validating python source
[debug] [2024-10-06T02:20:55.128Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:20:55.130Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:20:55.137Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:20:55.240Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:20:55.248Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:20:55.248Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081

[error] Press CTRL+C to quit

[debug] [2024-10-06T02:20:56.122Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\__pycache__\main.cpython-311.pyc changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\__pycache__\\main.cpython-311.pyc changed, reloading triggers"}}
[error] 127.0.0.1 - - [06/Oct/2024 02:20:57] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:20:57.118Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:20:57] "GET /__/quitquitquit HTTP/1.1" 200 -

[debug] [2024-10-06T02:20:57.124Z] Customer code is not Node
[debug] [2024-10-06T02:20:57.124Z] Validating python source
[debug] [2024-10-06T02:20:57.124Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:20:57.126Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:20:57.131Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:20:57.142Z] [worker-pool] Shutting down IDLE worker (us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Shutting down IDLE worker (us-central1-main)"}}
[debug] [2024-10-06T02:20:57.142Z] [worker-us-central1-main-9c208cb0-8021-46f9-bb83-6bc34c6f2efa]: FINISHING {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-9c208cb0-8021-46f9-bb83-6bc34c6f2efa]: FINISHING"}}
[debug] [2024-10-06T02:20:57.145Z] [worker-us-central1-main-9c208cb0-8021-46f9-bb83-6bc34c6f2efa]: exited {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-9c208cb0-8021-46f9-bb83-6bc34c6f2efa]: exited"}}
[debug] [2024-10-06T02:20:57.145Z] [worker-us-central1-main-9c208cb0-8021-46f9-bb83-6bc34c6f2efa]: FINISHED {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-9c208cb0-8021-46f9-bb83-6bc34c6f2efa]: FINISHED"}}
[debug] [2024-10-06T02:20:57.265Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:20:57.276Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:20:57.276Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081
Press CTRL+C to quit

[error] 127.0.0.1 - - [06/Oct/2024 02:20:59] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:20:59.554Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:20:59] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:21:15.917Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:21:16.103Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:21:16.251Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:21:16.393Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:21:17.400Z] Customer code is not Node
[debug] [2024-10-06T02:21:17.400Z] Validating python source
[debug] [2024-10-06T02:21:17.401Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:21:17.403Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:21:17.408Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:21:17.510Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:21:17.517Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:21:17.518Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081

[error] Press CTRL+C to quit

[debug] [2024-10-06T02:21:18.399Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\__pycache__\main.cpython-311.pyc changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\__pycache__\\main.cpython-311.pyc changed, reloading triggers"}}
[error] 127.0.0.1 - - [06/Oct/2024 02:21:19] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:21:19.267Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:21:19] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:21:19.402Z] Customer code is not Node
[debug] [2024-10-06T02:21:19.402Z] Validating python source
[debug] [2024-10-06T02:21:19.402Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:21:19.404Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:21:19.408Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:21:19.505Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:21:19.512Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:21:19.512Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081

[error] Press CTRL+C to quit

[error] 127.0.0.1 - - [06/Oct/2024 02:21:21] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:21:21.624Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:21:21] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:21:34.194Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:21:34.342Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:21:34.493Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:21:34.627Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:21:35.643Z] Customer code is not Node
[debug] [2024-10-06T02:21:35.644Z] Validating python source
[debug] [2024-10-06T02:21:35.644Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:21:35.647Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:21:35.653Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:21:35.755Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:21:35.763Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:21:35.763Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081

[error] Press CTRL+C to quit

[debug] [2024-10-06T02:21:36.565Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\__pycache__\main.cpython-311.pyc changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\__pycache__\\main.cpython-311.pyc changed, reloading triggers"}}
[error] 127.0.0.1 - - [06/Oct/2024 02:21:37] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:21:37.456Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:21:37] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:21:37.576Z] Customer code is not Node
[debug] [2024-10-06T02:21:37.576Z] Validating python source
[debug] [2024-10-06T02:21:37.576Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:21:37.578Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:21:37.583Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:21:37.680Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:21:37.688Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:21:37.688Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[debug] [2024-10-06T02:21:38.112Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:21:38.307Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:21:38.452Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081
Press CTRL+C to quit

[debug] [2024-10-06T02:21:38.630Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\__pycache__\main.cpython-311.pyc changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\__pycache__\\main.cpython-311.pyc changed, reloading triggers"}}
[debug] [2024-10-06T02:21:39.647Z] Customer code is not Node
[debug] [2024-10-06T02:21:39.647Z] Validating python source
[debug] [2024-10-06T02:21:39.647Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[error] 127.0.0.1 - - [06/Oct/2024 02:21:39] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:21:39.650Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:21:39.675Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:21:39.683Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:21:39] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:21:39.809Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:21:39.819Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8082"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:21:39.819Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8082
Press CTRL+C to quit

[error] 127.0.0.1 - - [06/Oct/2024 02:21:41] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:21:41.934Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:21:41] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:21:53.908Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:21:53.908Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T02:21:53.908Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:21:53.908Z"],"workRunningCount":1}
[debug] [2024-10-06T02:21:53.908Z] Accepted request OPTIONS /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T02:21:53.912Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T02:21:53.913Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T02:21:53.913Z] [worker-pool] Cleaned up workers for us-central1-main: 1 --> 0 {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Cleaned up workers for us-central1-main: 1 --> 0"}}
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:21:53.920Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","functions-framework"]
[debug] [2024-10-06T02:21:53.924Z] [worker-pool] addWorker(us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] addWorker(us-central1-main)"}}
[debug] [2024-10-06T02:21:53.925Z] [worker-pool] Adding worker with key us-central1-main, total=1 {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Adding worker with key us-central1-main, total=1"}}
[info] >   * Serving Flask app 'main' {"user":" * Serving Flask app 'main'\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Serving Flask app 'main'\r"}}
[info] >   * Debug mode: off {"user":" * Debug mode: off\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Debug mode: off\r"}}
[info] >  WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. {"user":"WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\r"}}
[info] >   * Running on http://127.0.0.1:8293 {"user":" * Running on http://127.0.0.1:8293\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Running on http://127.0.0.1:8293\r"}}
[info] >  Press CTRL+C to quit {"user":"Press CTRL+C to quit\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m Press CTRL+C to quit\r"}}
[info] >  127.0.0.1 - - [06/Oct/2024 02:21:55] "GET /__/health HTTP/1.1" 404 - {"user":"127.0.0.1 - - [06/Oct/2024 02:21:55] \"GET /__/health HTTP/1.1\" 404 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 02:21:55] \"GET /__/health HTTP/1.1\" 404 -\r"}}
[debug] [2024-10-06T02:21:55.600Z] [worker-us-central1-main-6f1ed762-4d7a-4817-af40-cdd933d6ca0e]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-6f1ed762-4d7a-4817-af40-cdd933d6ca0e]: IDLE"}}
[debug] [2024-10-06T02:21:55.600Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T02:21:55.601Z] [worker-us-central1-main-6f1ed762-4d7a-4817-af40-cdd933d6ca0e]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-6f1ed762-4d7a-4817-af40-cdd933d6ca0e]: BUSY"}}
[info] >  127.0.0.1 - - [06/Oct/2024 02:21:55] "OPTIONS /chat HTTP/1.1" 204 - {"user":"127.0.0.1 - - [06/Oct/2024 02:21:55] \"OPTIONS /chat HTTP/1.1\" 204 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 02:21:55] \"OPTIONS /chat HTTP/1.1\" 204 -\r"}}
[debug] [2024-10-06T02:21:55.604Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 3.8615ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 3.8615ms"}}
[debug] [2024-10-06T02:21:55.605Z] [worker-us-central1-main-6f1ed762-4d7a-4817-af40-cdd933d6ca0e]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-6f1ed762-4d7a-4817-af40-cdd933d6ca0e]: IDLE"}}
[debug] [2024-10-06T02:21:55.605Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T02:21:55.605Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T02:21:55.605Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T02:22:26.008Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:22:26.175Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:22:26.328Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:22:26.476Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:22:27.479Z] Customer code is not Node
[debug] [2024-10-06T02:22:27.479Z] Validating python source
[debug] [2024-10-06T02:22:27.479Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:22:27.480Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:22:27.486Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:22:27.577Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:22:27.585Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:22:27.585Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[debug] [2024-10-06T02:22:27.611Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:22:27.797Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:22:27.942Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:22:28.089Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081

[error] Press CTRL+C to quit

[debug] [2024-10-06T02:22:28.508Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\__pycache__\main.cpython-311.pyc changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\__pycache__\\main.cpython-311.pyc changed, reloading triggers"}}
[error] 127.0.0.1 - - [06/Oct/2024 02:22:29] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:22:29.329Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:22:29] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:22:29.350Z] [worker-pool] Shutting down IDLE worker (us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Shutting down IDLE worker (us-central1-main)"}}
[debug] [2024-10-06T02:22:29.350Z] [worker-us-central1-main-6f1ed762-4d7a-4817-af40-cdd933d6ca0e]: FINISHING {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-6f1ed762-4d7a-4817-af40-cdd933d6ca0e]: FINISHING"}}
[debug] [2024-10-06T02:22:29.353Z] [worker-us-central1-main-6f1ed762-4d7a-4817-af40-cdd933d6ca0e]: exited {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-6f1ed762-4d7a-4817-af40-cdd933d6ca0e]: exited"}}
[debug] [2024-10-06T02:22:29.353Z] [worker-us-central1-main-6f1ed762-4d7a-4817-af40-cdd933d6ca0e]: FINISHED {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-6f1ed762-4d7a-4817-af40-cdd933d6ca0e]: FINISHED"}}
[debug] [2024-10-06T02:22:29.518Z] Customer code is not Node
[debug] [2024-10-06T02:22:29.518Z] Validating python source
[debug] [2024-10-06T02:22:29.518Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:22:29.520Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:22:29.525Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:22:29.633Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:22:29.642Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:22:29.642Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081
Press CTRL+C to quit

[error] 127.0.0.1 - - [06/Oct/2024 02:22:31] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:22:31.668Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:22:31] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:22:55.703Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:22:55.703Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T02:22:55.703Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:22:55.703Z"],"workRunningCount":1}
[debug] [2024-10-06T02:22:55.703Z] Accepted request OPTIONS /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T02:22:55.707Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T02:22:55.707Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T02:22:55.708Z] [worker-pool] Cleaned up workers for us-central1-main: 1 --> 0 {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Cleaned up workers for us-central1-main: 1 --> 0"}}
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:22:55.716Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","functions-framework"]
[debug] [2024-10-06T02:22:55.720Z] [worker-pool] addWorker(us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] addWorker(us-central1-main)"}}
[debug] [2024-10-06T02:22:55.721Z] [worker-pool] Adding worker with key us-central1-main, total=1 {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Adding worker with key us-central1-main, total=1"}}
[info] >   * Serving Flask app 'main' {"user":" * Serving Flask app 'main'\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Serving Flask app 'main'\r"}}
[info] >   * Debug mode: off {"user":" * Debug mode: off\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Debug mode: off\r"}}
[info] >  WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. {"user":"WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\r"}}
[info] >   * Running on http://127.0.0.1:8911 {"user":" * Running on http://127.0.0.1:8911\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Running on http://127.0.0.1:8911\r"}}
[info] >  Press CTRL+C to quit {"user":"Press CTRL+C to quit\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m Press CTRL+C to quit\r"}}
[info] >  127.0.0.1 - - [06/Oct/2024 02:22:57] "GET /__/health HTTP/1.1" 404 - {"user":"127.0.0.1 - - [06/Oct/2024 02:22:57] \"GET /__/health HTTP/1.1\" 404 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 02:22:57] \"GET /__/health HTTP/1.1\" 404 -\r"}}
[debug] [2024-10-06T02:22:57.397Z] [worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: IDLE"}}
[debug] [2024-10-06T02:22:57.397Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T02:22:57.398Z] [worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: BUSY"}}
[info] >  127.0.0.1 - - [06/Oct/2024 02:22:57] "OPTIONS /chat HTTP/1.1" 204 - {"user":"127.0.0.1 - - [06/Oct/2024 02:22:57] \"OPTIONS /chat HTTP/1.1\" 204 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 02:22:57] \"OPTIONS /chat HTTP/1.1\" 204 -\r"}}
[debug] [2024-10-06T02:22:57.401Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 3.4845ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 3.4845ms"}}
[debug] [2024-10-06T02:22:57.402Z] [worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: IDLE"}}
[debug] [2024-10-06T02:22:57.402Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T02:22:57.402Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T02:22:57.402Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T02:22:57.405Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:22:57.405Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T02:22:57.405Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:22:57.405Z"],"workRunningCount":1}
[debug] [2024-10-06T02:22:57.406Z] Accepted request POST /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T02:22:57.406Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T02:22:57.407Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T02:22:57.407Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T02:22:57.407Z] [worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: BUSY"}}
[info] >  CHAT HISTORY [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}] {"user":"CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [2024-10-06 02:22:57,809] ERROR in app: Exception on /chat [POST] {"user":"[2024-10-06 02:22:57,809] ERROR in app: Exception on /chat [POST]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [2024-10-06 02:22:57,809] ERROR in app: Exception on /chat [POST]\r"}}
[info] >  Traceback (most recent call last): {"user":"Traceback (most recent call last):\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m Traceback (most recent call last):\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\flask\app.py", line 1473, in wsgi_app {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 1473, in wsgi_app\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 1473, in wsgi_app\r"}}
[info] >      response = self.full_dispatch_request() {"user":"    response = self.full_dispatch_request()\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     response = self.full_dispatch_request()\r"}}
[info] >                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 882, in full_dispatch_request\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 882, in full_dispatch_request\r"}}
[info] >      rv = self.handle_user_exception(e) {"user":"    rv = self.handle_user_exception(e)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     rv = self.handle_user_exception(e)\r"}}
[info] >           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 880, in full_dispatch_request\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 880, in full_dispatch_request\r"}}
[info] >      rv = self.dispatch_request() {"user":"    rv = self.dispatch_request()\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     rv = self.dispatch_request()\r"}}
[info] >           ^^^^^^^^^^^^^^^^^^^^^^^ {"user":"         ^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m          ^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\flask\app.py", line 865, in dispatch_request {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 865, in dispatch_request\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 865, in dispatch_request\r"}}
[info] >      return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return] {"user":"    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\functions_framework\execution_id.py", line 106, in wrapper {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\functions_framework\\execution_id.py\", line 106, in wrapper\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\functions_framework\\execution_id.py\", line 106, in wrapper\r"}}
[info] >      return view_function(*args, **kwargs) {"user":"    return view_function(*args, **kwargs)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return view_function(*args, **kwargs)\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\functions_framework\__init__.py", line 142, in view_func {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\functions_framework\\__init__.py\", line 142, in view_func\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\functions_framework\\__init__.py\", line 142, in view_func\r"}}
[info] >      return function(request._get_current_object()) {"user":"    return function(request._get_current_object())\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return function(request._get_current_object())\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions\https_fn.py", line 447, in on_request_wrapped {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\https_fn.py\", line 447, in on_request_wrapped\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\https_fn.py\", line 447, in on_request_wrapped\r"}}
[info] >      return _core._with_init(func)(request) {"user":"    return _core._with_init(func)(request)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return _core._with_init(func)(request)\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions\core.py", line 125, in wrapper {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\core.py\", line 125, in wrapper\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\core.py\", line 125, in wrapper\r"}}
[info] >      return fn(*args, **kwargs) {"user":"    return fn(*args, **kwargs)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return fn(*args, **kwargs)\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py", line 119, in main {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 119, in main\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 119, in main\r"}}
[info] >      return router(req) {"user":"    return router(req)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return router(req)\r"}}
[info] >             ^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py", line 108, in router {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 108, in router\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 108, in router\r"}}
[info] >      return route["methods"][method](request, **params) {"user":"    return route[\"methods\"][method](request, **params)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return route[\"methods\"][method](request, **params)\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py", line 203, in chat {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 203, in chat\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 203, in chat\r"}}
[info] >      completion = client.messages.create( {"user":"    completion = client.messages.create(\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     completion = client.messages.create(\r"}}
[info] >                   ^^^^^^^^^^^^^^^^^^^^^^^ {"user":"                 ^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m                  ^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\anthropic\_utils\_utils.py", line 274, in wrapper {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_utils\\_utils.py\", line 274, in wrapper\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_utils\\_utils.py\", line 274, in wrapper\r"}}
[info] >      return func(*args, **kwargs) {"user":"    return func(*args, **kwargs)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return func(*args, **kwargs)\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\anthropic\resources\messages.py", line 878, in create {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\resources\\messages.py\", line 878, in create\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\resources\\messages.py\", line 878, in create\r"}}
[info] >      return self._post( {"user":"    return self._post(\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return self._post(\r"}}
[info] >             ^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\anthropic\_base_client.py", line 1260, in post {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 1260, in post\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 1260, in post\r"}}
[info] >      return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)) {"user":"    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\r"}}
[info] >                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\anthropic\_base_client.py", line 937, in request {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 937, in request\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 937, in request\r"}}
[info] >      return self._request( {"user":"    return self._request(\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return self._request(\r"}}
[info] >             ^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\anthropic\_base_client.py", line 1041, in _request {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 1041, in _request\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 1041, in _request\r"}}
[info] >      raise self._make_status_error_from_response(err.response) from None {"user":"    raise self._make_status_error_from_response(err.response) from None\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     raise self._make_status_error_from_response(err.response) from None\r"}}
[info] >  anthropic.BadRequestError: Error code: 400 - {'type': 'error', 'error': {'type': 'invalid_request_error', 'message': 'messages: roles must alternate between "user" and "assistant", but found multiple "user" roles in a row'}} {"user":"anthropic.BadRequestError: Error code: 400 - {'type': 'error', 'error': {'type': 'invalid_request_error', 'message': 'messages: roles must alternate between \"user\" and \"assistant\", but found multiple \"user\" roles in a row'}}\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m anthropic.BadRequestError: Error code: 400 - {'type': 'error', 'error': {'type': 'invalid_request_error', 'message': 'messages: roles must alternate between \"user\" and \"assistant\", but found multiple \"user\" roles in a row'}}\r"}}
[debug] [2024-10-06T02:22:57.918Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 510.8423ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 510.8423ms"}}
[debug] [2024-10-06T02:22:57.918Z] [worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: IDLE"}}
[debug] [2024-10-06T02:22:57.919Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T02:22:57.919Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T02:22:57.919Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[info] >  127.0.0.1 - - [06/Oct/2024 02:22:57] "POST /chat HTTP/1.1" 500 - {"user":"127.0.0.1 - - [06/Oct/2024 02:22:57] \"POST /chat HTTP/1.1\" 500 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 02:22:57] \"POST /chat HTTP/1.1\" 500 -\r"}}
[debug] [2024-10-06T02:26:12.705Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:26:12.874Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:26:13.021Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:26:13.166Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:26:14.168Z] Customer code is not Node
[debug] [2024-10-06T02:26:14.168Z] Validating python source
[debug] [2024-10-06T02:26:14.168Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:26:14.170Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:26:14.176Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:26:14.337Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:26:14.348Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:26:14.348Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081
Press CTRL+C to quit

[debug] [2024-10-06T02:26:15.157Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\__pycache__\main.cpython-311.pyc changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\__pycache__\\main.cpython-311.pyc changed, reloading triggers"}}
[debug] [2024-10-06T02:26:16.158Z] Customer code is not Node
[debug] [2024-10-06T02:26:16.159Z] Validating python source
[debug] [2024-10-06T02:26:16.159Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:26:16.161Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:26:16.195Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[error] 127.0.0.1 - - [06/Oct/2024 02:26:16] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:26:16.245Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:26:16] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:26:16.282Z] [worker-pool] Shutting down IDLE worker (us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Shutting down IDLE worker (us-central1-main)"}}
[debug] [2024-10-06T02:26:16.282Z] [worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: FINISHING {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: FINISHING"}}
[debug] [2024-10-06T02:26:16.286Z] [worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: exited {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: exited"}}
[debug] [2024-10-06T02:26:16.287Z] [worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: FINISHED {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-9e6d032b-2768-4b23-bd20-2748a7be9013]: FINISHED"}}
[debug] [2024-10-06T02:26:16.387Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:26:16.402Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8082"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:26:16.402Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8082
Press CTRL+C to quit

[error] 127.0.0.1 - - [06/Oct/2024 02:26:19] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:26:19.585Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:26:19] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:26:33.868Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:26:33.868Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T02:26:33.868Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:26:33.868Z"],"workRunningCount":1}
[debug] [2024-10-06T02:26:33.868Z] Accepted request OPTIONS /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T02:26:33.870Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T02:26:33.871Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T02:26:33.871Z] [worker-pool] Cleaned up workers for us-central1-main: 1 --> 0 {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Cleaned up workers for us-central1-main: 1 --> 0"}}
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:26:33.877Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","functions-framework"]
[debug] [2024-10-06T02:26:33.880Z] [worker-pool] addWorker(us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] addWorker(us-central1-main)"}}
[debug] [2024-10-06T02:26:33.881Z] [worker-pool] Adding worker with key us-central1-main, total=1 {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Adding worker with key us-central1-main, total=1"}}
[info] >   * Serving Flask app 'main' {"user":" * Serving Flask app 'main'\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Serving Flask app 'main'\r"}}
[info] >   * Debug mode: off {"user":" * Debug mode: off\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Debug mode: off\r"}}
[info] >  WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. {"user":"WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\r"}}
[info] >   * Running on http://127.0.0.1:8337 {"user":" * Running on http://127.0.0.1:8337\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Running on http://127.0.0.1:8337\r"}}
[info] >  Press CTRL+C to quit {"user":"Press CTRL+C to quit\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m Press CTRL+C to quit\r"}}
[info] >  127.0.0.1 - - [06/Oct/2024 02:26:36] "GET /__/health HTTP/1.1" 404 - {"user":"127.0.0.1 - - [06/Oct/2024 02:26:36] \"GET /__/health HTTP/1.1\" 404 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 02:26:36] \"GET /__/health HTTP/1.1\" 404 -\r"}}
[debug] [2024-10-06T02:26:36.102Z] [worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: IDLE"}}
[debug] [2024-10-06T02:26:36.103Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T02:26:36.103Z] [worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: BUSY"}}
[info] >  127.0.0.1 - - [06/Oct/2024 02:26:36] "OPTIONS /chat HTTP/1.1" 204 - {"user":"127.0.0.1 - - [06/Oct/2024 02:26:36] \"OPTIONS /chat HTTP/1.1\" 204 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 02:26:36] \"OPTIONS /chat HTTP/1.1\" 204 -\r"}}
[debug] [2024-10-06T02:26:36.107Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 3.9194ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 3.9194ms"}}
[debug] [2024-10-06T02:26:36.107Z] [worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: IDLE"}}
[debug] [2024-10-06T02:26:36.107Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T02:26:36.108Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T02:26:36.108Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T02:26:36.111Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:26:36.111Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T02:26:36.111Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:26:36.111Z"],"workRunningCount":1}
[debug] [2024-10-06T02:26:36.111Z] Accepted request POST /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T02:26:36.112Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T02:26:36.112Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T02:26:36.112Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T02:26:36.113Z] [worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: BUSY"}}
[info] >  CHAT HISTORY [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to ', 'role': 'user'}] {"user":"CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to ', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to ', 'role': 'user'}]\r"}}
[info] >  [2024-10-06 02:26:36,484] ERROR in app: Exception on /chat [POST] {"user":"[2024-10-06 02:26:36,484] ERROR in app: Exception on /chat [POST]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [2024-10-06 02:26:36,484] ERROR in app: Exception on /chat [POST]\r"}}
[info] >  Traceback (most recent call last): {"user":"Traceback (most recent call last):\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m Traceback (most recent call last):\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\flask\app.py", line 1473, in wsgi_app {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 1473, in wsgi_app\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 1473, in wsgi_app\r"}}
[info] >      response = self.full_dispatch_request() {"user":"    response = self.full_dispatch_request()\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     response = self.full_dispatch_request()\r"}}
[info] >                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 882, in full_dispatch_request\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 882, in full_dispatch_request\r"}}
[info] >      rv = self.handle_user_exception(e) {"user":"    rv = self.handle_user_exception(e)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     rv = self.handle_user_exception(e)\r"}}
[info] >           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 880, in full_dispatch_request\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 880, in full_dispatch_request\r"}}
[info] >      rv = self.dispatch_request() {"user":"    rv = self.dispatch_request()\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     rv = self.dispatch_request()\r"}}
[info] >           ^^^^^^^^^^^^^^^^^^^^^^^ {"user":"         ^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m          ^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\flask\app.py", line 865, in dispatch_request {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 865, in dispatch_request\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 865, in dispatch_request\r"}}
[info] >      return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return] {"user":"    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\functions_framework\execution_id.py", line 106, in wrapper {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\functions_framework\\execution_id.py\", line 106, in wrapper\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\functions_framework\\execution_id.py\", line 106, in wrapper\r"}}
[info] >      return view_function(*args, **kwargs) {"user":"    return view_function(*args, **kwargs)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return view_function(*args, **kwargs)\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\functions_framework\__init__.py", line 142, in view_func {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\functions_framework\\__init__.py\", line 142, in view_func\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\functions_framework\\__init__.py\", line 142, in view_func\r"}}
[info] >      return function(request._get_current_object()) {"user":"    return function(request._get_current_object())\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return function(request._get_current_object())\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions\https_fn.py", line 447, in on_request_wrapped {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\https_fn.py\", line 447, in on_request_wrapped\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\https_fn.py\", line 447, in on_request_wrapped\r"}}
[info] >      return _core._with_init(func)(request) {"user":"    return _core._with_init(func)(request)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return _core._with_init(func)(request)\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions\core.py", line 125, in wrapper {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\core.py\", line 125, in wrapper\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\core.py\", line 125, in wrapper\r"}}
[info] >      return fn(*args, **kwargs) {"user":"    return fn(*args, **kwargs)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return fn(*args, **kwargs)\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py", line 119, in main {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 119, in main\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 119, in main\r"}}
[info] >      return router(req) {"user":"    return router(req)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return router(req)\r"}}
[info] >             ^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py", line 108, in router {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 108, in router\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 108, in router\r"}}
[info] >      return route["methods"][method](request, **params) {"user":"    return route[\"methods\"][method](request, **params)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return route[\"methods\"][method](request, **params)\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py", line 200, in chat {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 200, in chat\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 200, in chat\r"}}
[info] >      completion = client.messages.create( {"user":"    completion = client.messages.create(\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     completion = client.messages.create(\r"}}
[info] >                   ^^^^^^^^^^^^^^^^^^^^^^^ {"user":"                 ^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m                  ^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\anthropic\_utils\_utils.py", line 274, in wrapper {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_utils\\_utils.py\", line 274, in wrapper\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_utils\\_utils.py\", line 274, in wrapper\r"}}
[info] >      return func(*args, **kwargs) {"user":"    return func(*args, **kwargs)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return func(*args, **kwargs)\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\anthropic\resources\messages.py", line 878, in create {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\resources\\messages.py\", line 878, in create\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\resources\\messages.py\", line 878, in create\r"}}
[info] >      return self._post( {"user":"    return self._post(\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return self._post(\r"}}
[info] >             ^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\anthropic\_base_client.py", line 1260, in post {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 1260, in post\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 1260, in post\r"}}
[info] >      return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)) {"user":"    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\r"}}
[info] >                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\anthropic\_base_client.py", line 937, in request {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 937, in request\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 937, in request\r"}}
[info] >      return self._request( {"user":"    return self._request(\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return self._request(\r"}}
[info] >             ^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\anthropic\_base_client.py", line 1041, in _request {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 1041, in _request\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 1041, in _request\r"}}
[info] >      raise self._make_status_error_from_response(err.response) from None {"user":"    raise self._make_status_error_from_response(err.response) from None\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     raise self._make_status_error_from_response(err.response) from None\r"}}
[info] >  anthropic.BadRequestError: Error code: 400 - {'type': 'error', 'error': {'type': 'invalid_request_error', 'message': 'messages: roles must alternate between "user" and "assistant", but found multiple "user" roles in a row'}} {"user":"anthropic.BadRequestError: Error code: 400 - {'type': 'error', 'error': {'type': 'invalid_request_error', 'message': 'messages: roles must alternate between \"user\" and \"assistant\", but found multiple \"user\" roles in a row'}}\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m anthropic.BadRequestError: Error code: 400 - {'type': 'error', 'error': {'type': 'invalid_request_error', 'message': 'messages: roles must alternate between \"user\" and \"assistant\", but found multiple \"user\" roles in a row'}}\r"}}
[debug] [2024-10-06T02:26:36.506Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 393.6514ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 393.6514ms"}}
[debug] [2024-10-06T02:26:36.507Z] [worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: IDLE"}}
[debug] [2024-10-06T02:26:36.507Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T02:26:36.507Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T02:26:36.507Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[info] >  127.0.0.1 - - [06/Oct/2024 02:26:36] "POST /chat HTTP/1.1" 500 - {"user":"127.0.0.1 - - [06/Oct/2024 02:26:36] \"POST /chat HTTP/1.1\" 500 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 02:26:36] \"POST /chat HTTP/1.1\" 500 -\r"}}
[debug] [2024-10-06T02:28:05.324Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:28:05.514Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:28:05.690Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:28:05.845Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:28:05.988Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:28:06.989Z] Customer code is not Node
[debug] [2024-10-06T02:28:06.989Z] Validating python source
[debug] [2024-10-06T02:28:06.989Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:28:06.991Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:28:06.996Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:28:07.131Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:28:07.141Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:28:07.141Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081

[error] Press CTRL+C to quit

[debug] [2024-10-06T02:28:07.999Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\__pycache__\main.cpython-311.pyc changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\__pycache__\\main.cpython-311.pyc changed, reloading triggers"}}
[debug] [2024-10-06T02:28:08.875Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[error] 127.0.0.1 - - [06/Oct/2024 02:28:08] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:28:08.879Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:28:08] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:28:08.903Z] [worker-pool] Shutting down IDLE worker (us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Shutting down IDLE worker (us-central1-main)"}}
[debug] [2024-10-06T02:28:08.903Z] [worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: FINISHING {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: FINISHING"}}
[debug] [2024-10-06T02:28:08.905Z] [worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: exited {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: exited"}}
[debug] [2024-10-06T02:28:08.905Z] [worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: FINISHED {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-df52ffa8-9870-44bc-880b-2423cdbb0bd9]: FINISHED"}}
[debug] [2024-10-06T02:28:09.041Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:28:09.206Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:28:09.352Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:28:10.364Z] Customer code is not Node
[debug] [2024-10-06T02:28:10.365Z] Validating python source
[debug] [2024-10-06T02:28:10.365Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:28:10.367Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:28:10.373Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:28:10.476Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:28:10.484Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:28:10.484Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081
Press CTRL+C to quit
[error] 

[debug] [2024-10-06T02:28:11.339Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\__pycache__\main.cpython-311.pyc changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\__pycache__\\main.cpython-311.pyc changed, reloading triggers"}}
[error] 127.0.0.1 - - [06/Oct/2024 02:28:12] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:28:12.162Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:28:12] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:28:12.340Z] Customer code is not Node
[debug] [2024-10-06T02:28:12.340Z] Validating python source
[debug] [2024-10-06T02:28:12.340Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:28:12.341Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:28:12.345Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:28:12.440Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:28:12.447Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:28:12.447Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081

[error] Press CTRL+C to quit

[error] 127.0.0.1 - - [06/Oct/2024 02:28:14] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:28:14.207Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:28:14] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:28:15.606Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:28:15.782Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:28:15.928Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:28:16.083Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:28:16.209Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py changed, reloading triggers"}}
[debug] [2024-10-06T02:28:17.220Z] Customer code is not Node
[debug] [2024-10-06T02:28:17.221Z] Validating python source
[debug] [2024-10-06T02:28:17.221Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:28:17.221Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:28:17.226Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:28:17.341Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:28:17.350Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:28:17.351Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081

[error] Press CTRL+C to quit

[debug] [2024-10-06T02:28:18.200Z] File C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\__pycache__\main.cpython-311.pyc changed, reloading triggers {"metadata":{"emulator":{"name":"functions"},"message":"File C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\__pycache__\\main.cpython-311.pyc changed, reloading triggers"}}
[error] 127.0.0.1 - - [06/Oct/2024 02:28:19] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:28:19.022Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:28:19] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:28:19.202Z] Customer code is not Node
[debug] [2024-10-06T02:28:19.202Z] Validating python source
[debug] [2024-10-06T02:28:19.203Z] Building python source
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:28:19.203Z] Could not find functions.yaml. Must use http discovery
[debug] [2024-10-06T02:28:19.211Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","-c","\"import firebase_functions; import os; print(os.path.dirname(firebase_functions.__file__))\""]
[debug] [2024-10-06T02:28:19.298Z] stdout: C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions

[debug] [2024-10-06T02:28:19.305Z] Running admin server with args: ["python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""] and env: {"GCLOUD_PROJECT":"ai-ui-generator","K_REVISION":"1","PORT":"80","GOOGLE_CLOUD_QUOTA_PROJECT":"ai-ui-generator","FUNCTIONS_EMULATOR":"true","TZ":"UTC","FIREBASE_DEBUG_MODE":"true","FIREBASE_DEBUG_FEATURES":"{\"skipTokenVerification\":true,\"enableCors\":true}","FIREBASE_EMULATOR_HUB":"127.0.0.1:4400","FIREBASE_AUTH_EMULATOR_HOST":"127.0.0.1:9099","FIRESTORE_EMULATOR_HOST":"127.0.0.1:8080","FIREBASE_FIRESTORE_EMULATOR_ADDRESS":"127.0.0.1:8080","CLOUD_EVENTARC_EMULATOR_HOST":"http://127.0.0.1:9299","CLOUD_TASKS_EMULATOR_HOST":"127.0.0.1:9499","FIREBASE_CONFIG":"{\"storageBucket\":\"ai-ui-generator.appspot.com\",\"projectId\":\"ai-ui-generator\"}","GOOGLE_APPLICATION_CREDENTIALS":"C:\\Users\\hranw\\AppData\\Roaming\\firebase\\hran_wen_gmail.com_application_default_credentials.json","ADMIN_PORT":"8081"} in C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions
[debug] [2024-10-06T02:28:19.305Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","python.exe","\"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\private\\serving.py\""]
[info]  * Serving Flask app 'serving'
 * Debug mode: off

[error] WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.
 * Running on http://127.0.0.1:8081
Press CTRL+C to quit

[error] 127.0.0.1 - - [06/Oct/2024 02:28:21] "GET /__/functions.yaml HTTP/1.1" 200 -

[debug] [2024-10-06T02:28:21.239Z] Got response from /__/functions.yaml endpoints:
  main:
    availableMemoryMb: null
    concurrency: null
    entryPoint: main
    httpsTrigger: {}
    ingressSettings: null
    labels: {}
    maxInstances: null
    minInstances: null
    platform: gcfv2
    secretEnvironmentVariables: []
    serviceAccountEmail: null
    timeoutSeconds: null
params: []
requiredAPIs: []
specVersion: v1alpha1

[error] 127.0.0.1 - - [06/Oct/2024 02:28:21] "GET /__/quitquitquit HTTP/1.1" 200 -

[info] +  functions: Loaded functions definitions from source: main. {"metadata":{"emulator":{"name":"functions"},"message":"Loaded functions definitions from source: main."}}
[debug] [2024-10-06T02:28:35.406Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:28:35.406Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T02:28:35.407Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:28:35.406Z"],"workRunningCount":1}
[debug] [2024-10-06T02:28:35.407Z] Accepted request OPTIONS /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T02:28:35.409Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T02:28:35.409Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T02:28:35.409Z] [worker-pool] Cleaned up workers for us-central1-main: 1 --> 0 {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Cleaned up workers for us-central1-main: 1 --> 0"}}
[info] i  functions: Loaded environment variables from .env. 
[debug] [2024-10-06T02:28:35.416Z] Running command with virtualenv: command="C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Scripts\activate.bat", args=["","&&","functions-framework"]
[debug] [2024-10-06T02:28:35.420Z] [worker-pool] addWorker(us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] addWorker(us-central1-main)"}}
[debug] [2024-10-06T02:28:35.420Z] [worker-pool] Adding worker with key us-central1-main, total=1 {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] Adding worker with key us-central1-main, total=1"}}
[info] >   * Serving Flask app 'main' {"user":" * Serving Flask app 'main'\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Serving Flask app 'main'\r"}}
[info] >   * Debug mode: off {"user":" * Debug mode: off\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Debug mode: off\r"}}
[info] >  WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. {"user":"WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\r"}}
[info] >   * Running on http://127.0.0.1:8705 {"user":" * Running on http://127.0.0.1:8705\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m  * Running on http://127.0.0.1:8705\r"}}
[info] >  Press CTRL+C to quit {"user":"Press CTRL+C to quit\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m Press CTRL+C to quit\r"}}
[info] >  127.0.0.1 - - [06/Oct/2024 02:28:37] "GET /__/health HTTP/1.1" 404 - {"user":"127.0.0.1 - - [06/Oct/2024 02:28:37] \"GET /__/health HTTP/1.1\" 404 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 02:28:37] \"GET /__/health HTTP/1.1\" 404 -\r"}}
[debug] [2024-10-06T02:28:37.205Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE"}}
[debug] [2024-10-06T02:28:37.205Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T02:28:37.205Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY"}}
[info] >  127.0.0.1 - - [06/Oct/2024 02:28:37] "OPTIONS /chat HTTP/1.1" 204 - {"user":"127.0.0.1 - - [06/Oct/2024 02:28:37] \"OPTIONS /chat HTTP/1.1\" 204 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 02:28:37] \"OPTIONS /chat HTTP/1.1\" 204 -\r"}}
[debug] [2024-10-06T02:28:37.209Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 3.6824ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 3.6824ms"}}
[debug] [2024-10-06T02:28:37.210Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE"}}
[debug] [2024-10-06T02:28:37.210Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T02:28:37.210Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T02:28:37.210Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T02:28:37.211Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:28:37.211Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T02:28:37.211Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T02:28:37.211Z"],"workRunningCount":1}
[debug] [2024-10-06T02:28:37.212Z] Accepted request POST /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T02:28:37.212Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T02:28:37.212Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T02:28:37.212Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T02:28:37.213Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY"}}
[info] >  CHAT HISTORY [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to ', 'role': 'user'}, {'content': 'I want to', 'role': 'user'}] {"user":"CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to ', 'role': 'user'}, {'content': 'I want to', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}, {'content': 'I want to ', 'role': 'user'}, {'content': 'I want to', 'role': 'user'}]\r"}}
[info] >  [2024-10-06 02:28:37,649] ERROR in app: Exception on /chat [POST] {"user":"[2024-10-06 02:28:37,649] ERROR in app: Exception on /chat [POST]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [2024-10-06 02:28:37,649] ERROR in app: Exception on /chat [POST]\r"}}
[info] >  Traceback (most recent call last): {"user":"Traceback (most recent call last):\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m Traceback (most recent call last):\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\flask\app.py", line 1473, in wsgi_app {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 1473, in wsgi_app\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 1473, in wsgi_app\r"}}
[info] >      response = self.full_dispatch_request() {"user":"    response = self.full_dispatch_request()\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     response = self.full_dispatch_request()\r"}}
[info] >                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\flask\app.py", line 882, in full_dispatch_request {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 882, in full_dispatch_request\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 882, in full_dispatch_request\r"}}
[info] >      rv = self.handle_user_exception(e) {"user":"    rv = self.handle_user_exception(e)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     rv = self.handle_user_exception(e)\r"}}
[info] >           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\flask\app.py", line 880, in full_dispatch_request {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 880, in full_dispatch_request\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 880, in full_dispatch_request\r"}}
[info] >      rv = self.dispatch_request() {"user":"    rv = self.dispatch_request()\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     rv = self.dispatch_request()\r"}}
[info] >           ^^^^^^^^^^^^^^^^^^^^^^^ {"user":"         ^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m          ^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\flask\app.py", line 865, in dispatch_request {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 865, in dispatch_request\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\flask\\app.py\", line 865, in dispatch_request\r"}}
[info] >      return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return] {"user":"    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\functions_framework\execution_id.py", line 106, in wrapper {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\functions_framework\\execution_id.py\", line 106, in wrapper\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\functions_framework\\execution_id.py\", line 106, in wrapper\r"}}
[info] >      return view_function(*args, **kwargs) {"user":"    return view_function(*args, **kwargs)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return view_function(*args, **kwargs)\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\functions_framework\__init__.py", line 142, in view_func {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\functions_framework\\__init__.py\", line 142, in view_func\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\functions_framework\\__init__.py\", line 142, in view_func\r"}}
[info] >      return function(request._get_current_object()) {"user":"    return function(request._get_current_object())\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return function(request._get_current_object())\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions\https_fn.py", line 447, in on_request_wrapped {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\https_fn.py\", line 447, in on_request_wrapped\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\https_fn.py\", line 447, in on_request_wrapped\r"}}
[info] >      return _core._with_init(func)(request) {"user":"    return _core._with_init(func)(request)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return _core._with_init(func)(request)\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\firebase_functions\core.py", line 125, in wrapper {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\core.py\", line 125, in wrapper\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\firebase_functions\\core.py\", line 125, in wrapper\r"}}
[info] >      return fn(*args, **kwargs) {"user":"    return fn(*args, **kwargs)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return fn(*args, **kwargs)\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py", line 122, in main {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 122, in main\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 122, in main\r"}}
[info] >      return router(req) {"user":"    return router(req)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return router(req)\r"}}
[info] >             ^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py", line 111, in router {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 111, in router\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 111, in router\r"}}
[info] >      return route["methods"][method](request, **params) {"user":"    return route[\"methods\"][method](request, **params)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return route[\"methods\"][method](request, **params)\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\main.py", line 203, in chat {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 203, in chat\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\main.py\", line 203, in chat\r"}}
[info] >      completion = client.messages.create( {"user":"    completion = client.messages.create(\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     completion = client.messages.create(\r"}}
[info] >                   ^^^^^^^^^^^^^^^^^^^^^^^ {"user":"                 ^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m                  ^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\anthropic\_utils\_utils.py", line 274, in wrapper {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_utils\\_utils.py\", line 274, in wrapper\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_utils\\_utils.py\", line 274, in wrapper\r"}}
[info] >      return func(*args, **kwargs) {"user":"    return func(*args, **kwargs)\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return func(*args, **kwargs)\r"}}
[info] >             ^^^^^^^^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\anthropic\resources\messages.py", line 878, in create {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\resources\\messages.py\", line 878, in create\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\resources\\messages.py\", line 878, in create\r"}}
[info] >      return self._post( {"user":"    return self._post(\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return self._post(\r"}}
[info] >             ^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\anthropic\_base_client.py", line 1260, in post {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 1260, in post\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 1260, in post\r"}}
[info] >      return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls)) {"user":"    return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return cast(ResponseT, self.request(cast_to, opts, stream=stream, stream_cls=stream_cls))\r"}}
[info] >                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ {"user":"                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\anthropic\_base_client.py", line 937, in request {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 937, in request\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 937, in request\r"}}
[info] >      return self._request( {"user":"    return self._request(\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     return self._request(\r"}}
[info] >             ^^^^^^^^^^^^^^ {"user":"           ^^^^^^^^^^^^^^\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m            ^^^^^^^^^^^^^^\r"}}
[info] >    File "C:\Users\hranw\Documents\GitHub\ai-ui-generator\functions\venv\Lib\site-packages\anthropic\_base_client.py", line 1041, in _request {"user":"  File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 1041, in _request\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m   File \"C:\\Users\\hranw\\Documents\\GitHub\\ai-ui-generator\\functions\\venv\\Lib\\site-packages\\anthropic\\_base_client.py\", line 1041, in _request\r"}}
[info] >      raise self._make_status_error_from_response(err.response) from None {"user":"    raise self._make_status_error_from_response(err.response) from None\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m     raise self._make_status_error_from_response(err.response) from None\r"}}
[info] >  anthropic.BadRequestError: Error code: 400 - {'type': 'error', 'error': {'type': 'invalid_request_error', 'message': 'messages: roles must alternate between "user" and "assistant", but found multiple "user" roles in a row'}} {"user":"anthropic.BadRequestError: Error code: 400 - {'type': 'error', 'error': {'type': 'invalid_request_error', 'message': 'messages: roles must alternate between \"user\" and \"assistant\", but found multiple \"user\" roles in a row'}}\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m anthropic.BadRequestError: Error code: 400 - {'type': 'error', 'error': {'type': 'invalid_request_error', 'message': 'messages: roles must alternate between \"user\" and \"assistant\", but found multiple \"user\" roles in a row'}}\r"}}
[debug] [2024-10-06T02:28:37.675Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 462.5614ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 462.5614ms"}}
[debug] [2024-10-06T02:28:37.676Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE"}}
[debug] [2024-10-06T02:28:37.676Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T02:28:37.676Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T02:28:37.676Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[info] >  127.0.0.1 - - [06/Oct/2024 02:28:37] "POST /chat HTTP/1.1" 500 - {"user":"127.0.0.1 - - [06/Oct/2024 02:28:37] \"POST /chat HTTP/1.1\" 500 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 02:28:37] \"POST /chat HTTP/1.1\" 500 -\r"}}
[debug] [2024-10-06T03:18:01.301Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:18:01.299Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T03:18:01.310Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:18:01.299Z"],"workRunningCount":1}
[debug] [2024-10-06T03:18:01.311Z] Accepted request OPTIONS /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T03:18:01.326Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T03:18:01.326Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T03:18:01.327Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T03:18:01.330Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY"}}
[info] >  127.0.0.1 - - [06/Oct/2024 03:18:01] "OPTIONS /chat HTTP/1.1" 204 - {"user":"127.0.0.1 - - [06/Oct/2024 03:18:01] \"OPTIONS /chat HTTP/1.1\" 204 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 03:18:01] \"OPTIONS /chat HTTP/1.1\" 204 -\r"}}
[debug] [2024-10-06T03:18:01.391Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 60.9455ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 60.9455ms"}}
[debug] [2024-10-06T03:18:01.392Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE"}}
[debug] [2024-10-06T03:18:01.392Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T03:18:01.392Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T03:18:01.392Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T03:18:01.395Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:18:01.394Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T03:18:01.395Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:18:01.394Z"],"workRunningCount":1}
[debug] [2024-10-06T03:18:01.395Z] Accepted request POST /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T03:18:01.397Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T03:18:01.397Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T03:18:01.398Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T03:18:01.398Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY"}}
[info] >  CHAT HISTORY [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'i want to create a leetcode for pytorch', 'role': 'user'}] {"user":"CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'i want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'i want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'i want to create a leetcode for pytorch', 'role': 'user'}] {"user":"[{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'i want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'i want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  127.0.0.1 - - [06/Oct/2024 03:18:10] "POST /chat HTTP/1.1" 200 - {"user":"127.0.0.1 - - [06/Oct/2024 03:18:10] \"POST /chat HTTP/1.1\" 200 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 03:18:10] \"POST /chat HTTP/1.1\" 200 -\r"}}
[debug] [2024-10-06T03:18:10.728Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 9329.4521ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 9329.4521ms"}}
[debug] [2024-10-06T03:18:10.728Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE"}}
[debug] [2024-10-06T03:18:10.728Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T03:18:10.728Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T03:18:10.728Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[info] >  [TextBlock(text='{\n  "questions": [\n    {\n      "id": 1,\n      "text": "What is the primary color scheme you envision for your LeetCode-like platform for PyTorch?",\n      "type": "multiple_choice",\n      "options": ["Blue and white", "Dark mode (black and gray)", "Green and white", "Purple and white"]\n    },\n    {\n      "id": 2,\n      "text": "Which layout structure do you prefer for the main page?",\n      "type": "multiple_choice",\n      "options": ["Grid of problem cards", "List view with problem details", "Tabbed interface for different categories", "Sidebar navigation with main content area"]\n    },\n    {\n      "id": 3,\n      "text": "What key features do you want to include on the main page?",\n      "type": "multiple_choice",\n      "options": ["Problem difficulty filters", "Search bar", "User profile summary", "Leaderboard", "All of the above"]\n    },\n    {\n      "id": 4,\n      "text": "How would you like to handle responsive design for mobile devices?",\n      "type": "multiple_choice",\n      "options": ["Stackable grid for smaller screens", "Hamburger menu for navigation", "Simplified layout for mobile", "All of the above"]\n    },\n    {\n      "id": 5,\n      "text": "Do you want to include any data visualization elements (e.g., charts for user progress)?",\n      "type": "multiple_choice",\n      "options": ["Yes, on the main page", "Yes, but on a separate dashboard", "No, keep it simple"]\n    },\n    {\n      "id": 6,\n      "text": "What style of buttons and interactive elements do you prefer?",\n      "type": "multiple_choice",\n      "options": ["Flat design", "Subtle shadows and depth", "Colorful and bold", "Minimalist and monochromatic"]\n    },\n    {\n      "id": 7,\n      "text": "Do you want to incorporate any PyTorch-specific branding or visual elements?",\n      "type": "text"\n    }\n  ]\n}', type='text')] {"user":"[TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What is the primary color scheme you envision for your LeetCode-like platform for PyTorch?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Blue and white\", \"Dark mode (black and gray)\", \"Green and white\", \"Purple and white\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which layout structure do you prefer for the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Grid of problem cards\", \"List view with problem details\", \"Tabbed interface for different categories\", \"Sidebar navigation with main content area\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What key features do you want to include on the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem difficulty filters\", \"Search bar\", \"User profile summary\", \"Leaderboard\", \"All of the above\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"How would you like to handle responsive design for mobile devices?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Stackable grid for smaller screens\", \"Hamburger menu for navigation\", \"Simplified layout for mobile\", \"All of the above\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"Do you want to include any data visualization elements (e.g., charts for user progress)?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes, on the main page\", \"Yes, but on a separate dashboard\", \"No, keep it simple\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"What style of buttons and interactive elements do you prefer?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Flat design\", \"Subtle shadows and depth\", \"Colorful and bold\", \"Minimalist and monochromatic\"]\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"Do you want to incorporate any PyTorch-specific branding or visual elements?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What is the primary color scheme you envision for your LeetCode-like platform for PyTorch?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Blue and white\", \"Dark mode (black and gray)\", \"Green and white\", \"Purple and white\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which layout structure do you prefer for the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Grid of problem cards\", \"List view with problem details\", \"Tabbed interface for different categories\", \"Sidebar navigation with main content area\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What key features do you want to include on the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem difficulty filters\", \"Search bar\", \"User profile summary\", \"Leaderboard\", \"All of the above\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"How would you like to handle responsive design for mobile devices?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Stackable grid for smaller screens\", \"Hamburger menu for navigation\", \"Simplified layout for mobile\", \"All of the above\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"Do you want to include any data visualization elements (e.g., charts for user progress)?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes, on the main page\", \"Yes, but on a separate dashboard\", \"No, keep it simple\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"What style of buttons and interactive elements do you prefer?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Flat design\", \"Subtle shadows and depth\", \"Colorful and bold\", \"Minimalist and monochromatic\"]\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"Do you want to incorporate any PyTorch-specific branding or visual elements?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r"}}
[debug] [2024-10-06T03:23:38.348Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:23:38.348Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T03:23:38.349Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:23:38.348Z"],"workRunningCount":1}
[debug] [2024-10-06T03:23:38.349Z] Accepted request POST /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T03:23:38.354Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T03:23:38.354Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T03:23:38.354Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T03:23:38.355Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY"}}
[info] >  CHAT HISTORY [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}] {"user":"CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}] {"user":"[{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [TextBlock(text='{\n  "questions": [\n    {\n      "id": 1,\n      "text": "What is the primary color scheme you envision for your LeetCode-style PyTorch platform?",\n      "type": "multiple_choice",\n      "options": ["Blue and white", "Green and black", "Purple and white", "Orange and black"]\n    },\n    {\n      "id": 2,\n      "text": "Which layout structure do you prefer for the main page?",\n      "type": "multiple_choice",\n      "options": ["Single column", "Two columns", "Three columns", "Grid layout"]\n    },\n    {\n      "id": 3,\n      "text": "What is the most important feature you want to highlight on the main page?",\n      "type": "multiple_choice",\n      "options": ["Problem list", "User profile", "Leaderboard", "PyTorch documentation"]\n    },\n    {\n      "id": 4,\n      "text": "Do you want a dark mode option for your platform?",\n      "type": "multiple_choice",\n      "options": ["Yes", "No"]\n    },\n    {\n      "id": 5,\n      "text": "How would you like the navigation to be structured?",\n      "type": "multiple_choice",\n      "options": ["Top horizontal bar", "Left sidebar", "Both top bar and sidebar", "Hamburger menu for mobile"]\n    },\n    {\n      "id": 6,\n      "text": "What level of responsive design do you need?",\n      "type": "multiple_choice",\n      "options": ["Desktop only", "Desktop and tablet", "Fully responsive (desktop, tablet, and mobile)"]\n    },\n    {\n      "id": 7,\n      "text": "Do you want to include any data visualization elements (e.g., charts for user progress)?",\n      "type": "multiple_choice",\n      "options": ["Yes", "No"]\n    },\n    {\n      "id": 8,\n      "text": "Are there any specific PyTorch-related icons or graphics you want to incorporate into the design?",\n      "type": "text"\n    }\n  ]\n}', type='text')] {"user":"[TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What is the primary color scheme you envision for your LeetCode-style PyTorch platform?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Blue and white\", \"Green and black\", \"Purple and white\", \"Orange and black\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which layout structure do you prefer for the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Single column\", \"Two columns\", \"Three columns\", \"Grid layout\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What is the most important feature you want to highlight on the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem list\", \"User profile\", \"Leaderboard\", \"PyTorch documentation\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"Do you want a dark mode option for your platform?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"How would you like the navigation to be structured?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Top horizontal bar\", \"Left sidebar\", \"Both top bar and sidebar\", \"Hamburger menu for mobile\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"What level of responsive design do you need?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Desktop only\", \"Desktop and tablet\", \"Fully responsive (desktop, tablet, and mobile)\"]\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"Do you want to include any data visualization elements (e.g., charts for user progress)?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\"]\\n    },\\n    {\\n      \"id\": 8,\\n      \"text\": \"Are there any specific PyTorch-related icons or graphics you want to incorporate into the design?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What is the primary color scheme you envision for your LeetCode-style PyTorch platform?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Blue and white\", \"Green and black\", \"Purple and white\", \"Orange and black\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which layout structure do you prefer for the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Single column\", \"Two columns\", \"Three columns\", \"Grid layout\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What is the most important feature you want to highlight on the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem list\", \"User profile\", \"Leaderboard\", \"PyTorch documentation\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"Do you want a dark mode option for your platform?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"How would you like the navigation to be structured?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Top horizontal bar\", \"Left sidebar\", \"Both top bar and sidebar\", \"Hamburger menu for mobile\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"What level of responsive design do you need?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Desktop only\", \"Desktop and tablet\", \"Fully responsive (desktop, tablet, and mobile)\"]\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"Do you want to include any data visualization elements (e.g., charts for user progress)?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\"]\\n    },\\n    {\\n      \"id\": 8,\\n      \"text\": \"Are there any specific PyTorch-related icons or graphics you want to incorporate into the design?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r"}}
[info] >  127.0.0.1 - - [06/Oct/2024 03:23:48] "POST /chat HTTP/1.1" 200 - {"user":"127.0.0.1 - - [06/Oct/2024 03:23:48] \"POST /chat HTTP/1.1\" 200 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 03:23:48] \"POST /chat HTTP/1.1\" 200 -\r"}}
[debug] [2024-10-06T03:23:48.237Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 9882.8025ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 9882.8025ms"}}
[debug] [2024-10-06T03:23:48.238Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE"}}
[debug] [2024-10-06T03:23:48.238Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T03:23:48.238Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T03:23:48.238Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T03:27:24.574Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:27:24.574Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T03:27:24.575Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:27:24.574Z"],"workRunningCount":1}
[debug] [2024-10-06T03:27:24.575Z] Accepted request POST /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T03:27:24.579Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T03:27:24.579Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T03:27:24.579Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T03:27:24.580Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY"}}
[info] >  CHAT HISTORY [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'leetcode for pytorch', 'role': 'user'}] {"user":"CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'leetcode for pytorch', 'role': 'user'}] {"user":"[{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  127.0.0.1 - - [06/Oct/2024 03:27:33] "POST /chat HTTP/1.1" 200 - {"user":"127.0.0.1 - - [06/Oct/2024 03:27:33] \"POST /chat HTTP/1.1\" 200 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 03:27:33] \"POST /chat HTTP/1.1\" 200 -\r"}}
[debug] [2024-10-06T03:27:33.574Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 8995.9813ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 8995.9813ms"}}
[debug] [2024-10-06T03:27:33.576Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE"}}
[debug] [2024-10-06T03:27:33.576Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T03:27:33.576Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T03:27:33.576Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[info] >  [TextBlock(text='{\n  "questions": [\n    {\n      "id": 1,\n      "text": "What is the primary purpose of your LeetCode for PyTorch app?",\n      "type": "multiple_choice",\n      "options": ["Practice coding problems", "Learn PyTorch", "Both coding and PyTorch practice", "Track progress and performance"]\n    },\n    {\n      "id": 2,\n      "text": "Which color scheme would you prefer for the app?",\n      "type": "multiple_choice",\n      "options": ["Dark theme (black/gray background)", "Light theme (white background)", "PyTorch colors (red and white)", "Custom color scheme"]\n    },\n    {\n      "id": 3,\n      "text": "What level of responsive design do you need?",\n      "type": "multiple_choice",\n      "options": ["Desktop only", "Desktop and tablet", "Fully responsive (desktop, tablet, and mobile)"]\n    },\n    {\n      "id": 4,\n      "text": "Which key features would you like to include in the app?",\n      "type": "multiple_choice",\n      "options": ["Problem list", "Code editor", "Submission history", "Leaderboard", "User profile", "Discussion forum"]\n    },\n    {\n      "id": 5,\n      "text": "How would you like to organize the main layout of the app?",\n      "type": "multiple_choice",\n      "options": ["Single column", "Two columns", "Three columns", "Grid layout"]\n    },\n    {\n      "id": 6,\n      "text": "Do you want to include any specific PyTorch-related elements in the design?",\n      "type": "text"\n    },\n    {\n      "id": 7,\n      "text": "What style of UI components do you prefer?",\n      "type": "multiple_choice",\n      "options": ["Minimalist and flat", "Skeuomorphic (realistic)", "Neumorphic (soft UI)", "Material design"]\n    },\n    {\n      "id": 8,\n      "text": "Are there any specific animations or transitions you\'d like to incorporate?",\n      "type": "text"\n    }\n  ]\n}', type='text')] {"user":"[TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What is the primary purpose of your LeetCode for PyTorch app?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Practice coding problems\", \"Learn PyTorch\", \"Both coding and PyTorch practice\", \"Track progress and performance\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which color scheme would you prefer for the app?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Dark theme (black/gray background)\", \"Light theme (white background)\", \"PyTorch colors (red and white)\", \"Custom color scheme\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What level of responsive design do you need?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Desktop only\", \"Desktop and tablet\", \"Fully responsive (desktop, tablet, and mobile)\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"Which key features would you like to include in the app?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem list\", \"Code editor\", \"Submission history\", \"Leaderboard\", \"User profile\", \"Discussion forum\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"How would you like to organize the main layout of the app?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Single column\", \"Two columns\", \"Three columns\", \"Grid layout\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"Do you want to include any specific PyTorch-related elements in the design?\",\\n      \"type\": \"text\"\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"What style of UI components do you prefer?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Minimalist and flat\", \"Skeuomorphic (realistic)\", \"Neumorphic (soft UI)\", \"Material design\"]\\n    },\\n    {\\n      \"id\": 8,\\n      \"text\": \"Are there any specific animations or transitions you\\'d like to incorporate?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What is the primary purpose of your LeetCode for PyTorch app?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Practice coding problems\", \"Learn PyTorch\", \"Both coding and PyTorch practice\", \"Track progress and performance\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which color scheme would you prefer for the app?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Dark theme (black/gray background)\", \"Light theme (white background)\", \"PyTorch colors (red and white)\", \"Custom color scheme\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What level of responsive design do you need?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Desktop only\", \"Desktop and tablet\", \"Fully responsive (desktop, tablet, and mobile)\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"Which key features would you like to include in the app?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem list\", \"Code editor\", \"Submission history\", \"Leaderboard\", \"User profile\", \"Discussion forum\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"How would you like to organize the main layout of the app?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Single column\", \"Two columns\", \"Three columns\", \"Grid layout\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"Do you want to include any specific PyTorch-related elements in the design?\",\\n      \"type\": \"text\"\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"What style of UI components do you prefer?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Minimalist and flat\", \"Skeuomorphic (realistic)\", \"Neumorphic (soft UI)\", \"Material design\"]\\n    },\\n    {\\n      \"id\": 8,\\n      \"text\": \"Are there any specific animations or transitions you\\'d like to incorporate?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r"}}
[debug] [2024-10-06T03:41:19.240Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:41:19.239Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T03:41:19.240Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:41:19.239Z"],"workRunningCount":1}
[debug] [2024-10-06T03:41:19.240Z] Accepted request POST /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T03:41:19.248Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T03:41:19.249Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T03:41:19.249Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T03:41:19.251Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY"}}
[info] >  CHAT HISTORY [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}] {"user":"CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}] {"user":"[{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [TextBlock(text='{\n  "questions": [\n    {\n      "id": 1,\n      "text": "What is the primary color scheme you envision for your LeetCode-style PyTorch platform?",\n      "type": "multiple_choice",\n      "options": ["Blue and white", "Dark mode (black and gray)", "Green and white", "Purple and white"]\n    },\n    {\n      "id": 2,\n      "text": "Which layout style do you prefer for the main page?",\n      "type": "multiple_choice",\n      "options": ["Grid of problem cards", "List view with problem details", "Tabular format", "Sidebar navigation with main content area"]\n    },\n    {\n      "id": 3,\n      "text": "What key features do you want to include on the main page?",\n      "type": "multiple_choice",\n      "options": ["Problem categories", "Difficulty levels", "Search bar", "User profile summary", "All of the above"]\n    },\n    {\n      "id": 4,\n      "text": "Do you want to include a code editor component on the same page as the problem description?",\n      "type": "multiple_choice",\n      "options": ["Yes", "No"]\n    },\n    {\n      "id": 5,\n      "text": "How would you like to handle responsiveness for mobile devices?",\n      "type": "multiple_choice",\n      "options": ["Stack elements vertically", "Hide certain elements", "Use a mobile-specific layout", "Zoom out the desktop version"]\n    },\n    {\n      "id": 6,\n      "text": "Would you like to include any gamification elements (e.g., progress bars, badges) on the main page?",\n      "type": "multiple_choice",\n      "options": ["Yes", "No"]\n    },\n    {\n      "id": 7,\n      "text": "Do you want to include a discussion or forum section for each problem?",\n      "type": "multiple_choice",\n      "options": ["Yes", "No"]\n    },\n    {\n      "id": 8,\n      "text": "Are there any specific PyTorch-related visual elements or branding you\'d like to incorporate?",\n      "type": "text"\n    }\n  ]\n}', type='text')] {"user":"[TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What is the primary color scheme you envision for your LeetCode-style PyTorch platform?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Blue and white\", \"Dark mode (black and gray)\", \"Green and white\", \"Purple and white\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which layout style do you prefer for the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Grid of problem cards\", \"List view with problem details\", \"Tabular format\", \"Sidebar navigation with main content area\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What key features do you want to include on the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem categories\", \"Difficulty levels\", \"Search bar\", \"User profile summary\", \"All of the above\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"Do you want to include a code editor component on the same page as the problem description?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"How would you like to handle responsiveness for mobile devices?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Stack elements vertically\", \"Hide certain elements\", \"Use a mobile-specific layout\", \"Zoom out the desktop version\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"Would you like to include any gamification elements (e.g., progress bars, badges) on the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\"]\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"Do you want to include a discussion or forum section for each problem?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\"]\\n    },\\n    {\\n      \"id\": 8,\\n      \"text\": \"Are there any specific PyTorch-related visual elements or branding you\\'d like to incorporate?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What is the primary color scheme you envision for your LeetCode-style PyTorch platform?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Blue and white\", \"Dark mode (black and gray)\", \"Green and white\", \"Purple and white\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which layout style do you prefer for the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Grid of problem cards\", \"List view with problem details\", \"Tabular format\", \"Sidebar navigation with main content area\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What key features do you want to include on the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem categories\", \"Difficulty levels\", \"Search bar\", \"User profile summary\", \"All of the above\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"Do you want to include a code editor component on the same page as the problem description?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"How would you like to handle responsiveness for mobile devices?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Stack elements vertically\", \"Hide certain elements\", \"Use a mobile-specific layout\", \"Zoom out the desktop version\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"Would you like to include any gamification elements (e.g., progress bars, badges) on the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\"]\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"Do you want to include a discussion or forum section for each problem?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\"]\\n    },\\n    {\\n      \"id\": 8,\\n      \"text\": \"Are there any specific PyTorch-related visual elements or branding you\\'d like to incorporate?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r"}}
[info] >  127.0.0.1 - - [06/Oct/2024 03:41:28] "POST /chat HTTP/1.1" 200 - {"user":"127.0.0.1 - - [06/Oct/2024 03:41:28] \"POST /chat HTTP/1.1\" 200 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 03:41:28] \"POST /chat HTTP/1.1\" 200 -\r"}}
[debug] [2024-10-06T03:41:28.536Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 9285.8697ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 9285.8697ms"}}
[debug] [2024-10-06T03:41:28.537Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE"}}
[debug] [2024-10-06T03:41:28.537Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T03:41:28.537Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T03:41:28.537Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T03:44:50.632Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:44:50.632Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T03:44:50.632Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:44:50.632Z"],"workRunningCount":1}
[debug] [2024-10-06T03:44:50.633Z] Accepted request POST /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T03:44:50.637Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T03:44:50.638Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T03:44:50.638Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T03:44:50.639Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY"}}
[info] >  CHAT HISTORY [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}] {"user":"CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}] {"user":"[{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  127.0.0.1 - - [06/Oct/2024 03:44:59] "POST /chat HTTP/1.1" 200 - {"user":"127.0.0.1 - - [06/Oct/2024 03:44:59] \"POST /chat HTTP/1.1\" 200 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 03:44:59] \"POST /chat HTTP/1.1\" 200 -\r"}}
[debug] [2024-10-06T03:44:59.834Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 9195.9596ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 9195.9596ms"}}
[debug] [2024-10-06T03:44:59.835Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE"}}
[debug] [2024-10-06T03:44:59.835Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T03:44:59.835Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T03:44:59.835Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[info] >  [TextBlock(text='{\n  "questions": [\n    {\n      "id": 1,\n      "text": "What is the primary color scheme you envision for your LeetCode-style PyTorch platform?",\n      "type": "multiple_choice",\n      "options": ["Blue and white", "Dark mode (black and gray)", "Green and white", "Purple and white"]\n    },\n    {\n      "id": 2,\n      "text": "Which layout structure do you prefer for the main page?",\n      "type": "multiple_choice",\n      "options": ["Two-column layout (problem list and coding area)", "Three-column layout (problem list, description, and coding area)", "Single column with expandable sections"]\n    },\n    {\n      "id": 3,\n      "text": "What level of responsiveness do you need for the application?",\n      "type": "multiple_choice",\n      "options": ["Desktop only", "Desktop and tablet", "Fully responsive (desktop, tablet, and mobile)"]\n    },\n    {\n      "id": 4,\n      "text": "Which key features would you like to include in the initial version?",\n      "type": "multiple_choice",\n      "options": ["Problem list", "Code editor", "Submission history", "Leaderboard", "User profile"]\n    },\n    {\n      "id": 5,\n      "text": "Do you want to include any data visualization components for PyTorch-specific features?",\n      "type": "multiple_choice",\n      "options": ["Yes, include charts and graphs", "No, keep it text-based for now"]\n    },\n    {\n      "id": 6,\n      "text": "How would you like to handle code execution and testing?",\n      "type": "multiple_choice",\n      "options": ["Client-side execution", "Server-side execution", "Both client and server-side options"]\n    },\n    {\n      "id": 7,\n      "text": "What type of navigation menu do you prefer?",\n      "type": "multiple_choice",\n      "options": ["Top horizontal menu", "Left sidebar", "Hamburger menu for mobile"]\n    },\n    {\n      "id": 8,\n      "text": "Are there any specific PyTorch or deep learning elements you want to emphasize in the design?",\n      "type": "text"\n    }\n  ]\n}', type='text')] {"user":"[TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What is the primary color scheme you envision for your LeetCode-style PyTorch platform?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Blue and white\", \"Dark mode (black and gray)\", \"Green and white\", \"Purple and white\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which layout structure do you prefer for the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Two-column layout (problem list and coding area)\", \"Three-column layout (problem list, description, and coding area)\", \"Single column with expandable sections\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What level of responsiveness do you need for the application?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Desktop only\", \"Desktop and tablet\", \"Fully responsive (desktop, tablet, and mobile)\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"Which key features would you like to include in the initial version?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem list\", \"Code editor\", \"Submission history\", \"Leaderboard\", \"User profile\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"Do you want to include any data visualization components for PyTorch-specific features?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes, include charts and graphs\", \"No, keep it text-based for now\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"How would you like to handle code execution and testing?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Client-side execution\", \"Server-side execution\", \"Both client and server-side options\"]\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"What type of navigation menu do you prefer?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Top horizontal menu\", \"Left sidebar\", \"Hamburger menu for mobile\"]\\n    },\\n    {\\n      \"id\": 8,\\n      \"text\": \"Are there any specific PyTorch or deep learning elements you want to emphasize in the design?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What is the primary color scheme you envision for your LeetCode-style PyTorch platform?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Blue and white\", \"Dark mode (black and gray)\", \"Green and white\", \"Purple and white\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which layout structure do you prefer for the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Two-column layout (problem list and coding area)\", \"Three-column layout (problem list, description, and coding area)\", \"Single column with expandable sections\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What level of responsiveness do you need for the application?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Desktop only\", \"Desktop and tablet\", \"Fully responsive (desktop, tablet, and mobile)\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"Which key features would you like to include in the initial version?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem list\", \"Code editor\", \"Submission history\", \"Leaderboard\", \"User profile\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"Do you want to include any data visualization components for PyTorch-specific features?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes, include charts and graphs\", \"No, keep it text-based for now\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"How would you like to handle code execution and testing?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Client-side execution\", \"Server-side execution\", \"Both client and server-side options\"]\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"What type of navigation menu do you prefer?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Top horizontal menu\", \"Left sidebar\", \"Hamburger menu for mobile\"]\\n    },\\n    {\\n      \"id\": 8,\\n      \"text\": \"Are there any specific PyTorch or deep learning elements you want to emphasize in the design?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r"}}
[debug] [2024-10-06T03:45:48.027Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:45:48.027Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T03:45:48.028Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:45:48.027Z"],"workRunningCount":1}
[debug] [2024-10-06T03:45:48.028Z] Accepted request POST /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T03:45:48.032Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T03:45:48.032Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T03:45:48.032Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T03:45:48.033Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY"}}
[info] >  CHAT HISTORY [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}] {"user":"CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}] {"user":"[{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [TextBlock(text='{\n  "questions": [\n    {\n      "id": 1,\n      "text": "What color scheme would you prefer for your LeetCode-style PyTorch application?",\n      "type": "multiple_choice",\n      "options": ["Dark theme", "Light theme", "Blue-based", "Green-based"]\n    },\n    {\n      "id": 2,\n      "text": "Which layout structure do you prefer for the main page?",\n      "type": "multiple_choice",\n      "options": ["Single column", "Two columns", "Three columns", "Grid layout"]\n    },\n    {\n      "id": 3,\n      "text": "What key features would you like to include in your application?",\n      "type": "multiple_choice",\n      "options": ["Problem list", "Code editor", "Submission history", "Leaderboard", "User profile"]\n    },\n    {\n      "id": 4,\n      "text": "How would you like the responsive design to behave on mobile devices?",\n      "type": "multiple_choice",\n      "options": ["Stack all elements vertically", "Hide certain elements", "Use a drawer for navigation", "Simplified layout"]\n    },\n    {\n      "id": 5,\n      "text": "What type of navigation would you prefer?",\n      "type": "multiple_choice",\n      "options": ["Top navbar", "Sidebar", "Bottom navbar", "Tabbed interface"]\n    },\n    {\n      "id": 6,\n      "text": "Do you want to include any data visualization components for PyTorch-specific features?",\n      "type": "text"\n    },\n    {\n      "id": 7,\n      "text": "How would you like to handle user authentication?",\n      "type": "multiple_choice",\n      "options": ["Email/Password", "OAuth (Google, GitHub, etc.)", "Both", "No authentication"]\n    },\n    {\n      "id": 8,\n      "text": "Are there any specific PyTorch-related UI components you\'d like to include?",\n      "type": "text"\n    }\n  ]\n}', type='text')] {"user":"[TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What color scheme would you prefer for your LeetCode-style PyTorch application?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Dark theme\", \"Light theme\", \"Blue-based\", \"Green-based\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which layout structure do you prefer for the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Single column\", \"Two columns\", \"Three columns\", \"Grid layout\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What key features would you like to include in your application?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem list\", \"Code editor\", \"Submission history\", \"Leaderboard\", \"User profile\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"How would you like the responsive design to behave on mobile devices?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Stack all elements vertically\", \"Hide certain elements\", \"Use a drawer for navigation\", \"Simplified layout\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"What type of navigation would you prefer?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Top navbar\", \"Sidebar\", \"Bottom navbar\", \"Tabbed interface\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"Do you want to include any data visualization components for PyTorch-specific features?\",\\n      \"type\": \"text\"\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"How would you like to handle user authentication?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Email/Password\", \"OAuth (Google, GitHub, etc.)\", \"Both\", \"No authentication\"]\\n    },\\n    {\\n      \"id\": 8,\\n      \"text\": \"Are there any specific PyTorch-related UI components you\\'d like to include?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What color scheme would you prefer for your LeetCode-style PyTorch application?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Dark theme\", \"Light theme\", \"Blue-based\", \"Green-based\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which layout structure do you prefer for the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Single column\", \"Two columns\", \"Three columns\", \"Grid layout\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What key features would you like to include in your application?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem list\", \"Code editor\", \"Submission history\", \"Leaderboard\", \"User profile\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"How would you like the responsive design to behave on mobile devices?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Stack all elements vertically\", \"Hide certain elements\", \"Use a drawer for navigation\", \"Simplified layout\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"What type of navigation would you prefer?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Top navbar\", \"Sidebar\", \"Bottom navbar\", \"Tabbed interface\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"Do you want to include any data visualization components for PyTorch-specific features?\",\\n      \"type\": \"text\"\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"How would you like to handle user authentication?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Email/Password\", \"OAuth (Google, GitHub, etc.)\", \"Both\", \"No authentication\"]\\n    },\\n    {\\n      \"id\": 8,\\n      \"text\": \"Are there any specific PyTorch-related UI components you\\'d like to include?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r"}}
[info] >  127.0.0.1 - - [06/Oct/2024 03:45:56] "POST /chat HTTP/1.1" 200 - {"user":"127.0.0.1 - - [06/Oct/2024 03:45:56] \"POST /chat HTTP/1.1\" 200 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 03:45:56] \"POST /chat HTTP/1.1\" 200 -\r"}}
[debug] [2024-10-06T03:45:56.539Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 8505.5891ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 8505.5891ms"}}
[debug] [2024-10-06T03:45:56.539Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE"}}
[debug] [2024-10-06T03:45:56.540Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T03:45:56.540Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T03:45:56.540Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T03:47:04.417Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:47:04.417Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T03:47:04.418Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:47:04.417Z"],"workRunningCount":1}
[debug] [2024-10-06T03:47:04.419Z] Accepted request POST /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T03:47:04.423Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T03:47:04.424Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T03:47:04.424Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T03:47:04.425Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY"}}
[info] >  CHAT HISTORY [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'i want to create a leetcode for pytorch', 'role': 'user'}] {"user":"CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'i want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'i want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'i want to create a leetcode for pytorch', 'role': 'user'}] {"user":"[{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'i want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'i want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [TextBlock(text='{\n  "questions": [\n    {\n      "id": 1,\n      "text": "What is the primary color scheme you envision for your LeetCode-style PyTorch platform?",\n      "type": "multiple_choice",\n      "options": ["Blue and white", "Dark mode (black and grey)", "Green and white", "Purple and white"]\n    },\n    {\n      "id": 2,\n      "text": "Which layout structure do you prefer for the main page?",\n      "type": "multiple_choice",\n      "options": ["Single column", "Two columns", "Three columns", "Grid layout"]\n    },\n    {\n      "id": 3,\n      "text": "What key features do you want to include on the main page?",\n      "type": "multiple_choice",\n      "options": ["Problem list", "User profile", "Leaderboard", "Discussion forum", "All of the above"]\n    },\n    {\n      "id": 4,\n      "text": "Do you want a responsive design that works well on mobile devices?",\n      "type": "multiple_choice",\n      "options": ["Yes", "No", "Focus on desktop only"]\n    },\n    {\n      "id": 5,\n      "text": "How would you like to display the PyTorch problems?",\n      "type": "multiple_choice",\n      "options": ["Card-based layout", "Table layout", "List layout"]\n    },\n    {\n      "id": 6,\n      "text": "Do you want to include a code editor component on the main page?",\n      "type": "multiple_choice",\n      "options": ["Yes", "No", "Link to separate page"]\n    },\n    {\n      "id": 7,\n      "text": "What type of navigation do you prefer?",\n      "type": "multiple_choice",\n      "options": ["Top navbar", "Sidebar", "Both top navbar and sidebar"]\n    },\n    {\n      "id": 8,\n      "text": "Are there any specific PyTorch-related icons or graphics you\'d like to incorporate?",\n      "type": "text"\n    }\n  ]\n}', type='text')] {"user":"[TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What is the primary color scheme you envision for your LeetCode-style PyTorch platform?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Blue and white\", \"Dark mode (black and grey)\", \"Green and white\", \"Purple and white\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which layout structure do you prefer for the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Single column\", \"Two columns\", \"Three columns\", \"Grid layout\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What key features do you want to include on the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem list\", \"User profile\", \"Leaderboard\", \"Discussion forum\", \"All of the above\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"Do you want a responsive design that works well on mobile devices?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\", \"Focus on desktop only\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"How would you like to display the PyTorch problems?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Card-based layout\", \"Table layout\", \"List layout\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"Do you want to include a code editor component on the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\", \"Link to separate page\"]\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"What type of navigation do you prefer?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Top navbar\", \"Sidebar\", \"Both top navbar and sidebar\"]\\n    },\\n    {\\n      \"id\": 8,\\n      \"text\": \"Are there any specific PyTorch-related icons or graphics you\\'d like to incorporate?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What is the primary color scheme you envision for your LeetCode-style PyTorch platform?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Blue and white\", \"Dark mode (black and grey)\", \"Green and white\", \"Purple and white\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which layout structure do you prefer for the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Single column\", \"Two columns\", \"Three columns\", \"Grid layout\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What key features do you want to include on the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem list\", \"User profile\", \"Leaderboard\", \"Discussion forum\", \"All of the above\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"Do you want a responsive design that works well on mobile devices?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\", \"Focus on desktop only\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"How would you like to display the PyTorch problems?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Card-based layout\", \"Table layout\", \"List layout\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"Do you want to include a code editor component on the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\", \"Link to separate page\"]\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"What type of navigation do you prefer?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Top navbar\", \"Sidebar\", \"Both top navbar and sidebar\"]\\n    },\\n    {\\n      \"id\": 8,\\n      \"text\": \"Are there any specific PyTorch-related icons or graphics you\\'d like to incorporate?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r"}}
[info] >  127.0.0.1 - - [06/Oct/2024 03:47:13] "POST /chat HTTP/1.1" 200 - {"user":"127.0.0.1 - - [06/Oct/2024 03:47:13] \"POST /chat HTTP/1.1\" 200 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 03:47:13] \"POST /chat HTTP/1.1\" 200 -\r"}}
[debug] [2024-10-06T03:47:13.866Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 9441.1345ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 9441.1345ms"}}
[debug] [2024-10-06T03:47:13.867Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE"}}
[debug] [2024-10-06T03:47:13.867Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T03:47:13.867Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T03:47:13.867Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T03:47:55.293Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:47:55.293Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T03:47:55.293Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T03:47:55.293Z"],"workRunningCount":1}
[debug] [2024-10-06T03:47:55.294Z] Accepted request POST /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T03:47:55.296Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T03:47:55.297Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T03:47:55.297Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T03:47:55.297Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY"}}
[info] >  CHAT HISTORY [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}] {"user":"CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}] {"user":"[{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [TextBlock(text='{\n  "questions": [\n    {\n      "id": 1,\n      "text": "What is the primary color scheme you envision for your LeetCode-style PyTorch application?",\n      "type": "multiple_choice",\n      "options": ["Blue and white", "Dark mode (black and gray)", "Green and white", "Custom color scheme"]\n    },\n    {\n      "id": 2,\n      "text": "Which layout structure do you prefer for the main page?",\n      "type": "multiple_choice",\n      "options": ["Single column", "Two columns", "Three columns", "Grid layout"]\n    },\n    {\n      "id": 3,\n      "text": "What key features do you want to include in your application?",\n      "type": "multiple_choice",\n      "options": ["Problem list", "Code editor", "Submission history", "Leaderboard", "User profile", "Discussion forum"]\n    },\n    {\n      "id": 4,\n      "text": "Do you want to implement a responsive design for mobile devices?",\n      "type": "multiple_choice",\n      "options": ["Yes", "No", "Only for tablets"]\n    },\n    {\n      "id": 5,\n      "text": "What type of navigation menu do you prefer?",\n      "type": "multiple_choice",\n      "options": ["Top horizontal bar", "Left sidebar", "Hamburger menu for mobile", "Combination of top bar and sidebar"]\n    },\n    {\n      "id": 6,\n      "text": "Do you want to include any data visualization components for user progress or statistics?",\n      "type": "multiple_choice",\n      "options": ["Yes, with charts and graphs", "Yes, with simple progress bars", "No, keep it text-based", "Not sure yet"]\n    },\n    {\n      "id": 7,\n      "text": "How would you describe the overall style you\'re aiming for?",\n      "type": "text"\n    }\n  ]\n}', type='text')] {"user":"[TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What is the primary color scheme you envision for your LeetCode-style PyTorch application?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Blue and white\", \"Dark mode (black and gray)\", \"Green and white\", \"Custom color scheme\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which layout structure do you prefer for the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Single column\", \"Two columns\", \"Three columns\", \"Grid layout\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What key features do you want to include in your application?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem list\", \"Code editor\", \"Submission history\", \"Leaderboard\", \"User profile\", \"Discussion forum\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"Do you want to implement a responsive design for mobile devices?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\", \"Only for tablets\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"What type of navigation menu do you prefer?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Top horizontal bar\", \"Left sidebar\", \"Hamburger menu for mobile\", \"Combination of top bar and sidebar\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"Do you want to include any data visualization components for user progress or statistics?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes, with charts and graphs\", \"Yes, with simple progress bars\", \"No, keep it text-based\", \"Not sure yet\"]\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"How would you describe the overall style you\\'re aiming for?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What is the primary color scheme you envision for your LeetCode-style PyTorch application?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Blue and white\", \"Dark mode (black and gray)\", \"Green and white\", \"Custom color scheme\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which layout structure do you prefer for the main page?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Single column\", \"Two columns\", \"Three columns\", \"Grid layout\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"What key features do you want to include in your application?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Problem list\", \"Code editor\", \"Submission history\", \"Leaderboard\", \"User profile\", \"Discussion forum\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"Do you want to implement a responsive design for mobile devices?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\", \"Only for tablets\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"What type of navigation menu do you prefer?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Top horizontal bar\", \"Left sidebar\", \"Hamburger menu for mobile\", \"Combination of top bar and sidebar\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"Do you want to include any data visualization components for user progress or statistics?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes, with charts and graphs\", \"Yes, with simple progress bars\", \"No, keep it text-based\", \"Not sure yet\"]\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"How would you describe the overall style you\\'re aiming for?\",\\n      \"type\": \"text\"\\n    }\\n  ]\\n}', type='text')]\r"}}
[info] >  127.0.0.1 - - [06/Oct/2024 03:48:03] "POST /chat HTTP/1.1" 200 - {"user":"127.0.0.1 - - [06/Oct/2024 03:48:03] \"POST /chat HTTP/1.1\" 200 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 03:48:03] \"POST /chat HTTP/1.1\" 200 -\r"}}
[debug] [2024-10-06T03:48:03.025Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 7728.0797999999995ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 7728.0797999999995ms"}}
[debug] [2024-10-06T03:48:03.026Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE"}}
[debug] [2024-10-06T03:48:03.026Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T03:48:03.026Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T03:48:03.026Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T04:09:43.011Z] [work-queue] {"queuedWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T04:09:43.010Z"],"queueLength":1,"runningWork":[],"workRunningCount":0}
[debug] [2024-10-06T04:09:43.018Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":["/ai-ui-generator/us-central1/main/chat-2024-10-06T04:09:43.010Z"],"workRunningCount":1}
[debug] [2024-10-06T04:09:43.019Z] Accepted request POST /ai-ui-generator/us-central1/main/chat --> us-central1-main
[debug] [2024-10-06T04:09:43.049Z] [functions] Runtime ready! Sending request! {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Runtime ready! Sending request!"}}
[debug] [2024-10-06T04:09:43.051Z] [functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat {"metadata":{"emulator":{"name":"functions"},"message":"[functions] Got req.url=/ai-ui-generator/us-central1/main/chat, mapping to path=/chat"}}
[debug] [2024-10-06T04:09:43.052Z] [worker-pool] submitRequest(triggerId=us-central1-main) {"metadata":{"emulator":{"name":"functions"},"message":"[worker-pool] submitRequest(triggerId=us-central1-main)"}}
[info] i  functions: Beginning execution of "us-central1-main" {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Beginning execution of \"us-central1-main\""}}
[debug] [2024-10-06T04:09:43.058Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: BUSY"}}
[info] >  CHAT HISTORY [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}] {"user":"CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m CHAT HISTORY [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [{'role': 'user', 'content': '\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\nHere are some examples: \n{\n"questions": [\n    {\n    "id": 1,\n    "text": "Which of these existing applications has a style closest to what you envision?",\n    "type": "multiple_choice",\n    "options": ["Facebook", "Airbnb", "Spotify", "None of these"]\n    },\n    {\n    "id": 2,\n    "text": "Do you want a minimalist design or something more elaborate with graphics or illustrations?",\n    "type": "text"\n    },\n    // ... more questions\n]\n}\n\nIn this Response, just return a JSON (and nothing else) that I can parse. \n\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \nthe "explanation" of what you did and the second field is "code" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\'t put backticks, I will\nuse json.loads() on your response, so it should be parseable.\n\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is "explanation" and "code". You should always return explanation and you should also return code if the user\'s query requires a change to code or they ask you to change something. \n  '}, {'role': 'assistant', 'content': "\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\n"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}] {"user":"[{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [{'role': 'user', 'content': '\\n  You are an AI assistant that will help design a frontend for a SINGLE PAGE app. There are a few steps you have to do. First, based on the user\\'s initial description, generate 6-8 questions to further clarify their design needs. Return the questions in JSON format, including the question text, type which should only be multiple choice or text, and any relevant options. The questions should cover aspects like layout, color scheme, responsive design needs, key features, and overall style inspiration.\\nHere are some examples: \\n{\\n\"questions\": [\\n    {\\n    \"id\": 1,\\n    \"text\": \"Which of these existing applications has a style closest to what you envision?\",\\n    \"type\": \"multiple_choice\",\\n    \"options\": [\"Facebook\", \"Airbnb\", \"Spotify\", \"None of these\"]\\n    },\\n    {\\n    \"id\": 2,\\n    \"text\": \"Do you want a minimalist design or something more elaborate with graphics or illustrations?\",\\n    \"type\": \"text\"\\n    },\\n    // ... more questions\\n]\\n}\\n\\nIn this Response, just return a JSON (and nothing else) that I can parse. \\n\\nAfter the user provides answers, you are to provide code for the design they described based on the chakra ui framework (THIS IS IMPORTANT). You should return ONLY a JSON where one field is \\nthe \"explanation\" of what you did and the second field is \"code\" for the actual typescript. Ensure the code can run and I directly execute it. Also, don\\'t put backticks, I will\\nuse json.loads() on your response, so it should be parseable.\\n\\nAfter this, the user might ask additional questions which you will help them with. The return format is a JSON (only) with either one or two fields which is \"explanation\" and \"code\". You should always return explanation and you should also return code if the user\\'s query requires a change to code or they ask you to change something. \\n  '}, {'role': 'assistant', 'content': \"\\nUnderstood. I'll generate questions based on the user's initial description and provide them in JSON format. After receiving the user's answers, I'll create a design using Chakra UI and return it in JSON format with an explanation and the TypeScript code. I'm ready to assist with any follow-up questions the user may have.\\n\"}, {'content': 'I want to create a leetcode for pytorch', 'role': 'user'}]\r"}}
[info] >  [TextBlock(text='{\n  "questions": [\n    {\n      "id": 1,\n      "text": "What color scheme would you prefer for your LeetCode-style PyTorch application?",\n      "type": "multiple_choice",\n      "options": ["Dark theme", "Light theme", "Colorful theme", "Minimal grayscale"]\n    },\n    {\n      "id": 2,\n      "text": "Which of these features are most important for your application?",\n      "type": "multiple_choice",\n      "options": ["Code editor", "Problem description", "Submission history", "Leaderboard"]\n    },\n    {\n      "id": 3,\n      "text": "How would you like the layout to be structured?",\n      "type": "multiple_choice",\n      "options": ["Single column", "Two columns", "Three columns", "Tabbed interface"]\n    },\n    {\n      "id": 4,\n      "text": "Do you want the design to be responsive for mobile devices?",\n      "type": "multiple_choice",\n      "options": ["Yes", "No", "Desktop-first with basic mobile support"]\n    },\n    {\n      "id": 5,\n      "text": "What level of complexity do you want for the user interface?",\n      "type": "multiple_choice",\n      "options": ["Simple and minimalistic", "Moderate complexity", "Feature-rich and detailed"]\n    },\n    {\n      "id": 6,\n      "text": "Do you want to include any data visualization components for PyTorch-specific features?",\n      "type": "multiple_choice",\n      "options": ["Yes, with charts and graphs", "Yes, with simple visualizations", "No, keep it text-based"]\n    },\n    {\n      "id": 7,\n      "text": "What type of navigation do you prefer?",\n      "type": "multiple_choice",\n      "options": ["Top navbar", "Sidebar", "Both top navbar and sidebar", "Minimal with dropdown menus"]\n    }\n  ]\n}', type='text')] {"user":"[TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What color scheme would you prefer for your LeetCode-style PyTorch application?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Dark theme\", \"Light theme\", \"Colorful theme\", \"Minimal grayscale\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which of these features are most important for your application?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Code editor\", \"Problem description\", \"Submission history\", \"Leaderboard\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"How would you like the layout to be structured?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Single column\", \"Two columns\", \"Three columns\", \"Tabbed interface\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"Do you want the design to be responsive for mobile devices?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\", \"Desktop-first with basic mobile support\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"What level of complexity do you want for the user interface?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Simple and minimalistic\", \"Moderate complexity\", \"Feature-rich and detailed\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"Do you want to include any data visualization components for PyTorch-specific features?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes, with charts and graphs\", \"Yes, with simple visualizations\", \"No, keep it text-based\"]\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"What type of navigation do you prefer?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Top navbar\", \"Sidebar\", \"Both top navbar and sidebar\", \"Minimal with dropdown menus\"]\\n    }\\n  ]\\n}', type='text')]\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m [TextBlock(text='{\\n  \"questions\": [\\n    {\\n      \"id\": 1,\\n      \"text\": \"What color scheme would you prefer for your LeetCode-style PyTorch application?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Dark theme\", \"Light theme\", \"Colorful theme\", \"Minimal grayscale\"]\\n    },\\n    {\\n      \"id\": 2,\\n      \"text\": \"Which of these features are most important for your application?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Code editor\", \"Problem description\", \"Submission history\", \"Leaderboard\"]\\n    },\\n    {\\n      \"id\": 3,\\n      \"text\": \"How would you like the layout to be structured?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Single column\", \"Two columns\", \"Three columns\", \"Tabbed interface\"]\\n    },\\n    {\\n      \"id\": 4,\\n      \"text\": \"Do you want the design to be responsive for mobile devices?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes\", \"No\", \"Desktop-first with basic mobile support\"]\\n    },\\n    {\\n      \"id\": 5,\\n      \"text\": \"What level of complexity do you want for the user interface?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Simple and minimalistic\", \"Moderate complexity\", \"Feature-rich and detailed\"]\\n    },\\n    {\\n      \"id\": 6,\\n      \"text\": \"Do you want to include any data visualization components for PyTorch-specific features?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Yes, with charts and graphs\", \"Yes, with simple visualizations\", \"No, keep it text-based\"]\\n    },\\n    {\\n      \"id\": 7,\\n      \"text\": \"What type of navigation do you prefer?\",\\n      \"type\": \"multiple_choice\",\\n      \"options\": [\"Top navbar\", \"Sidebar\", \"Both top navbar and sidebar\", \"Minimal with dropdown menus\"]\\n    }\\n  ]\\n}', type='text')]\r"}}
[info] >  127.0.0.1 - - [06/Oct/2024 04:09:51] "POST /chat HTTP/1.1" 200 - {"user":"127.0.0.1 - - [06/Oct/2024 04:09:51] \"POST /chat HTTP/1.1\" 200 -\r","metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"\u001b[90m> \u001b[39m 127.0.0.1 - - [06/Oct/2024 04:09:51] \"POST /chat HTTP/1.1\" 200 -\r"}}
[debug] [2024-10-06T04:09:51.847Z] Finishing up request with event=pause {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=pause"}}
[info] i  functions: Finished "us-central1-main" in 8789.1231ms {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finished \"us-central1-main\" in 8789.1231ms"}}
[debug] [2024-10-06T04:09:51.848Z] [worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"[worker-us-central1-main-d659388c-cbc2-4f65-84fc-efccefac6dea]: IDLE"}}
[debug] [2024-10-06T04:09:51.848Z] Finishing up request with event=finish {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=finish"}}
[debug] [2024-10-06T04:09:51.848Z] Finishing up request with event=close {"metadata":{"emulator":{"name":"functions"},"function":{"name":"us-central1-main"},"extension":{},"message":"Finishing up request with event=close"}}
[debug] [2024-10-06T04:09:51.848Z] [work-queue] {"queuedWork":[],"queueLength":0,"runningWork":[],"workRunningCount":0}
